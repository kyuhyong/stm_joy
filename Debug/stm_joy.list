
stm_joy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e7c  08008e7c  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008e7c  08008e7c  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e7c  08008e7c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008e84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20000180  08009004  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b04  08009004  00020b04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e3c  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357b  00000000  00000000  00033028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  000365a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3e  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af5e  00000000  00000000  0003845e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016442  00000000  00000000  000533bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091ffe  00000000  00000000  000697fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004734  00000000  00000000  000fb7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000fff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08008d58 	.word	0x08008d58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08008d58 	.word	0x08008d58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc8c 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f940 	bl	80003dc <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f920 	bl	80003a0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000160:	f008 f9e0 	bl	8008524 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000164:	f000 f8ce 	bl	8000304 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000168:	f000 f862 	bl	8000230 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  
	USER_Config();
 800016c:	f000 fb80 	bl	8000870 <USER_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	USER_Loop();
 8000170:	f000 fbaa 	bl	80008c8 <USER_Loop>
 8000174:	e7fc      	b.n	8000170 <main+0x24>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b094      	sub	sp, #80	; 0x50
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f008 fdbb 	bl	8008d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	f107 0314 	add.w	r3, r7, #20
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b4:	2301      	movs	r3, #1
 80001b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b8:	2302      	movs	r3, #2
 80001ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001cc:	4618      	mov	r0, r3
 80001ce:	f003 fa9b 	bl	8003708 <HAL_RCC_OscConfig>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d8:	f000 f974 	bl	80004c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001dc:	230f      	movs	r3, #15
 80001de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e0:	2302      	movs	r3, #2
 80001e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2102      	movs	r1, #2
 80001f8:	4618      	mov	r0, r3
 80001fa:	f003 fd07 	bl	8003c0c <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000204:	f000 f95e 	bl	80004c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000208:	2312      	movs	r3, #18
 800020a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800020c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000210:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f003 fe53 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000224:	f000 f94e 	bl	80004c4 <Error_Handler>
  }
}
 8000228:	bf00      	nop
 800022a:	3750      	adds	r7, #80	; 0x50
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000242:	4a2f      	ldr	r2, [pc, #188]	; (8000300 <MX_ADC1_Init+0xd0>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000246:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000250:	2201      	movs	r2, #1
 8000252:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000254:	4b29      	ldr	r3, [pc, #164]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000256:	2200      	movs	r2, #0
 8000258:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <MX_ADC1_Init+0xcc>)
 800025c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000262:	4b26      	ldr	r3, [pc, #152]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000268:	4b24      	ldr	r3, [pc, #144]	; (80002fc <MX_ADC1_Init+0xcc>)
 800026a:	2204      	movs	r2, #4
 800026c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026e:	4823      	ldr	r0, [pc, #140]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000270:	f000 fc5e 	bl	8000b30 <HAL_ADC_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800027a:	f000 f923 	bl	80004c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000282:	2301      	movs	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000286:	2302      	movs	r3, #2
 8000288:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	481b      	ldr	r0, [pc, #108]	; (80002fc <MX_ADC1_Init+0xcc>)
 8000290:	f000 fe20 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800029a:	f000 f913 	bl	80004c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4619      	mov	r1, r3
 80002aa:	4814      	ldr	r0, [pc, #80]	; (80002fc <MX_ADC1_Init+0xcc>)
 80002ac:	f000 fe12 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002b6:	f000 f905 	bl	80004c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002be:	2303      	movs	r3, #3
 80002c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	480d      	ldr	r0, [pc, #52]	; (80002fc <MX_ADC1_Init+0xcc>)
 80002c8:	f000 fe04 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002d2:	f000 f8f7 	bl	80004c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002d6:	2303      	movs	r3, #3
 80002d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80002da:	2304      	movs	r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <MX_ADC1_Init+0xcc>)
 80002e4:	f000 fdf6 	bl	8000ed4 <HAL_ADC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80002ee:	f000 f8e9 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000019c 	.word	0x2000019c
 8000300:	40012400 	.word	0x40012400

08000304 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <MX_TIM4_Init+0x94>)
 8000322:	4a1e      	ldr	r2, [pc, #120]	; (800039c <MX_TIM4_Init+0x98>)
 8000324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <MX_TIM4_Init+0x94>)
 8000328:	2247      	movs	r2, #71	; 0x47
 800032a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_TIM4_Init+0x94>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MX_TIM4_Init+0x94>)
 8000334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_TIM4_Init+0x94>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_TIM4_Init+0x94>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000346:	4814      	ldr	r0, [pc, #80]	; (8000398 <MX_TIM4_Init+0x94>)
 8000348:	f003 fe72 	bl	8004030 <HAL_TIM_Base_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000352:	f000 f8b7 	bl	80004c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800035c:	f107 0308 	add.w	r3, r7, #8
 8000360:	4619      	mov	r1, r3
 8000362:	480d      	ldr	r0, [pc, #52]	; (8000398 <MX_TIM4_Init+0x94>)
 8000364:	f004 f80e 	bl	8004384 <HAL_TIM_ConfigClockSource>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800036e:	f000 f8a9 	bl	80004c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800037a:	463b      	mov	r3, r7
 800037c:	4619      	mov	r1, r3
 800037e:	4806      	ldr	r0, [pc, #24]	; (8000398 <MX_TIM4_Init+0x94>)
 8000380:	f004 f9ec 	bl	800475c <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800038a:	f000 f89b 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	3718      	adds	r7, #24
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000210 	.word	0x20000210
 800039c:	40000800 	.word	0x40000800

080003a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_DMA_Init+0x38>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <MX_DMA_Init+0x38>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_DMA_Init+0x38>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	200b      	movs	r0, #11
 80003c4:	f001 f857 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003c8:	200b      	movs	r0, #11
 80003ca:	f001 f870 	bl	80014ae <HAL_NVIC_EnableIRQ>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b30      	ldr	r3, [pc, #192]	; (80004b4 <MX_GPIO_Init+0xd8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <MX_GPIO_Init+0xd8>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <MX_GPIO_Init+0xd8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_GPIO_Init+0xd8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_GPIO_Init+0xd8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a23      	ldr	r2, [pc, #140]	; (80004b4 <MX_GPIO_Init+0xd8>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <MX_GPIO_Init+0xd8>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_GPIO_Init+0xd8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000456:	4818      	ldr	r0, [pc, #96]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000458:	f001 fbcd 	bl	8001bf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800045c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4810      	ldr	r0, [pc, #64]	; (80004b8 <MX_GPIO_Init+0xdc>)
 8000476:	f001 fa23 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S12_Pin S13_Pin S14_Pin */
  GPIO_InitStruct.Pin = S12_Pin|S13_Pin|S14_Pin;
 800047a:	23e0      	movs	r3, #224	; 0xe0
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <MX_GPIO_Init+0xe0>)
 800048e:	f001 fa17 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S5_Pin PB2 S3_Pin
                           S4_Pin S15_Pin S16_Pin S17_Pin
                           S18_Pin S6_Pin S7_Pin S8_Pin
                           S9_Pin S10_Pin S11_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S5_Pin|GPIO_PIN_2|S3_Pin
 8000492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000496:	613b      	str	r3, [r7, #16]
                          |S4_Pin|S15_Pin|S16_Pin|S17_Pin
                          |S18_Pin|S6_Pin|S7_Pin|S8_Pin
                          |S9_Pin|S10_Pin|S11_Pin|S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <MX_GPIO_Init+0xe4>)
 80004a8:	f001 fa0a 	bl	80018c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40011000 	.word	0x40011000
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c8:	b672      	cpsid	i
}
 80004ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_MspInit+0x5c>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <HAL_MspInit+0x5c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6193      	str	r3, [r2, #24]
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_MspInit+0x5c>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <HAL_MspInit+0x5c>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_MspInit+0x5c>)
 80004f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <HAL_MspInit+0x5c>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_MspInit+0x60>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	4a04      	ldr	r2, [pc, #16]	; (8000530 <HAL_MspInit+0x60>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000
 8000530:	40010000 	.word	0x40010000

08000534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <HAL_ADC_MspInit+0xc0>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d14a      	bne.n	80005ea <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <HAL_ADC_MspInit+0xc4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <HAL_ADC_MspInit+0xc4>)
 800055a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <HAL_ADC_MspInit+0xc4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_ADC_MspInit+0xc4>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <HAL_ADC_MspInit+0xc4>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <HAL_ADC_MspInit+0xc4>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000584:	231f      	movs	r3, #31
 8000586:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000588:	2303      	movs	r3, #3
 800058a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <HAL_ADC_MspInit+0xc8>)
 8000594:	f001 f994 	bl	80018c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <HAL_ADC_MspInit+0xd0>)
 800059c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005c2:	2220      	movs	r2, #32
 80005c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005d0:	f000 ff88 	bl	80014e4 <HAL_DMA_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80005da:	f7ff ff73 	bl	80004c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005e2:	621a      	str	r2, [r3, #32]
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <HAL_ADC_MspInit+0xcc>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40012400 	.word	0x40012400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	200001cc 	.word	0x200001cc
 8000604:	40020008 	.word	0x40020008

08000608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <HAL_TIM_Base_MspInit+0x44>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d113      	bne.n	8000642 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_TIM_Base_MspInit+0x48>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <HAL_TIM_Base_MspInit+0x48>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_TIM_Base_MspInit+0x48>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	201e      	movs	r0, #30
 8000638:	f000 ff1d 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800063c:	201e      	movs	r0, #30
 800063e:	f000 ff36 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40000800 	.word	0x40000800
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069a:	f000 fa2d 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <DMA1_Channel1_IRQHandler+0x10>)
 80006aa:	f000 ffd5 	bl	8001658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001cc 	.word	0x200001cc

080006b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006be:	f001 fbf0 	bl	8001ea2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200007bc 	.word	0x200007bc

080006cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <TIM4_IRQHandler+0x14>)
 80006d2:	f003 fd4f 	bl	8004174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	TIM4_ISR();
 80006d6:	f000 f98d 	bl	80009f4 <TIM4_ISR>
  /* USER CODE END TIM4_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000210 	.word	0x20000210

080006e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <_read_gpio>:
uint64_t	timer_next_500ms = 500;

void _read_gpio(void);
uint16_t _adc_avg(uint16_t *buffer, uint16_t sample, int buffer_size);

void _read_gpio(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	for(int i = 0; i<GPIO_PORT_NUM; i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	e06d      	b.n	80007d8 <_read_gpio+0xe8>
		if(HAL_GPIO_ReadPin(gpio_ports[i].port, gpio_ports[i].pin) == GPIO_PIN_RESET) {
 80006fc:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <_read_gpio+0xf8>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000704:	4938      	ldr	r1, [pc, #224]	; (80007e8 <_read_gpio+0xf8>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	440b      	add	r3, r1
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	4610      	mov	r0, r2
 8000712:	f001 fa59 	bl	8001bc8 <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d12b      	bne.n	8000774 <_read_gpio+0x84>
			if(gpio_ports[i].bit_order < 16) {
 800071c:	4a32      	ldr	r2, [pc, #200]	; (80007e8 <_read_gpio+0xf8>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	4413      	add	r3, r2
 8000724:	88db      	ldrh	r3, [r3, #6]
 8000726:	2b0f      	cmp	r3, #15
 8000728:	d811      	bhi.n	800074e <_read_gpio+0x5e>
				bitset(gpio_state_bits[0], gpio_ports[i].bit_order);
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <_read_gpio+0xfc>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	b21a      	sxth	r2, r3
 8000730:	492d      	ldr	r1, [pc, #180]	; (80007e8 <_read_gpio+0xf8>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	88db      	ldrh	r3, [r3, #6]
 800073a:	4619      	mov	r1, r3
 800073c:	2301      	movs	r3, #1
 800073e:	408b      	lsls	r3, r1
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21b      	sxth	r3, r3
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <_read_gpio+0xfc>)
 800074a:	801a      	strh	r2, [r3, #0]
 800074c:	e041      	b.n	80007d2 <_read_gpio+0xe2>
			} else {
				bitset(gpio_state_bits[1], gpio_ports[i].bit_order - 16);
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <_read_gpio+0xfc>)
 8000750:	885b      	ldrh	r3, [r3, #2]
 8000752:	b21a      	sxth	r2, r3
 8000754:	4924      	ldr	r1, [pc, #144]	; (80007e8 <_read_gpio+0xf8>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	88db      	ldrh	r3, [r3, #6]
 800075e:	3b10      	subs	r3, #16
 8000760:	2101      	movs	r1, #1
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21b      	sxth	r3, r3
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <_read_gpio+0xfc>)
 8000770:	805a      	strh	r2, [r3, #2]
 8000772:	e02e      	b.n	80007d2 <_read_gpio+0xe2>
			}
		} else {
			if(gpio_ports[i].bit_order < 16) {
 8000774:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <_read_gpio+0xf8>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	4413      	add	r3, r2
 800077c:	88db      	ldrh	r3, [r3, #6]
 800077e:	2b0f      	cmp	r3, #15
 8000780:	d813      	bhi.n	80007aa <_read_gpio+0xba>
				bitclear(gpio_state_bits[0], gpio_ports[i].bit_order);
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <_read_gpio+0xfc>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b21a      	sxth	r2, r3
 8000788:	4917      	ldr	r1, [pc, #92]	; (80007e8 <_read_gpio+0xf8>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	440b      	add	r3, r1
 8000790:	88db      	ldrh	r3, [r3, #6]
 8000792:	4619      	mov	r1, r3
 8000794:	2301      	movs	r3, #1
 8000796:	408b      	lsls	r3, r1
 8000798:	b21b      	sxth	r3, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	b21b      	sxth	r3, r3
 800079e:	4013      	ands	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <_read_gpio+0xfc>)
 80007a6:	801a      	strh	r2, [r3, #0]
 80007a8:	e013      	b.n	80007d2 <_read_gpio+0xe2>
			} else {
				bitclear(gpio_state_bits[1], gpio_ports[i].bit_order - 16);
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <_read_gpio+0xfc>)
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	b21a      	sxth	r2, r3
 80007b0:	490d      	ldr	r1, [pc, #52]	; (80007e8 <_read_gpio+0xf8>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	440b      	add	r3, r1
 80007b8:	88db      	ldrh	r3, [r3, #6]
 80007ba:	3b10      	subs	r3, #16
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	43db      	mvns	r3, r3
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4013      	ands	r3, r2
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_read_gpio+0xfc>)
 80007d0:	805a      	strh	r2, [r3, #2]
	for(int i = 0; i<GPIO_PORT_NUM; i++) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b11      	cmp	r3, #17
 80007dc:	dd8e      	ble.n	80006fc <_read_gpio+0xc>
			}
		}
	}
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	08008dd8 	.word	0x08008dd8
 80007ec:	20000258 	.word	0x20000258

080007f0 <_adc_avg>:

uint16_t _adc_avg(uint16_t *buffer, uint16_t sample, int buffer_size)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	460b      	mov	r3, r1
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	817b      	strh	r3, [r7, #10]
	uint32_t total = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<buffer_size-1; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	e016      	b.n	8000836 <_adc_avg+0x46>
		buffer[i] = buffer[i+1];
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	3301      	adds	r3, #1
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	441a      	add	r2, r3
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	68f9      	ldr	r1, [r7, #12]
 8000818:	440b      	add	r3, r1
 800081a:	8812      	ldrh	r2, [r2, #0]
 800081c:	801a      	strh	r2, [r3, #0]
		total+=buffer[i];
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4413      	add	r3, r2
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4413      	add	r3, r2
 800082e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<buffer_size-1; i++) {
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3301      	adds	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3b01      	subs	r3, #1
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	dbe3      	blt.n	8000808 <_adc_avg+0x18>
	}
	//Update new value
	buffer[buffer_size-1] = sample;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000846:	3b01      	subs	r3, #1
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4413      	add	r3, r2
 800084e:	897a      	ldrh	r2, [r7, #10]
 8000850:	801a      	strh	r2, [r3, #0]
	total+=sample;
 8000852:	897b      	ldrh	r3, [r7, #10]
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	4413      	add	r3, r2
 8000858:	617b      	str	r3, [r7, #20]
	return (uint16_t)(total/buffer_size);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	b29b      	uxth	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <USER_Config>:

void USER_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	//To fill the buffer 
	for (uint8_t i=0; i<TX_BUFFER_SIZE; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e006      	b.n	800088a <USER_Config+0x1a>
	{ 
		tx_buffer[i] = i; 
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <USER_Config+0x44>)
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	54ca      	strb	r2, [r1, r3]
	for (uint8_t i=0; i<TX_BUFFER_SIZE; i++)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3301      	adds	r3, #1
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b06      	cmp	r3, #6
 800088e:	d9f5      	bls.n	800087c <USER_Config+0xc>
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_vals, 8);
 8000890:	2208      	movs	r2, #8
 8000892:	4909      	ldr	r1, [pc, #36]	; (80008b8 <USER_Config+0x48>)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <USER_Config+0x4c>)
 8000896:	f000 fa23 	bl	8000ce0 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start_IT(&htim4);
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <USER_Config+0x50>)
 800089c:	f003 fc18 	bl	80040d0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <USER_Config+0x54>)
 80008a8:	f001 f9a5 	bl	8001bf6 <HAL_GPIO_WritePin>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000298 	.word	0x20000298
 80008b8:	2000025c 	.word	0x2000025c
 80008bc:	2000019c 	.word	0x2000019c
 80008c0:	20000210 	.word	0x20000210
 80008c4:	40011000 	.word	0x40011000

080008c8 <USER_Loop>:

void USER_Loop(void)
{
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	if (flag_rx == 1) { 
 80008ce:	4b3c      	ldr	r3, [pc, #240]	; (80009c0 <USER_Loop+0xf8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d105      	bne.n	80008e2 <USER_Loop+0x1a>
		//Check if the first byte of the report buffer equals 1 
		if (report_buffer[0] == 1) { 
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <USER_Loop+0xfc>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
		else if (report_buffer[0] == 2) 
		{ 
			//Turn the user LED off 
			//HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET); 
		} 
		flag_rx = 0; 
 80008dc:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <USER_Loop+0xf8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
	} 
	//To send the output data when the button is pressed 
	if (flg_1ms==1) 
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <USER_Loop+0x100>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d14c      	bne.n	8000984 <USER_Loop+0xbc>
	{
		int16_t tmp;
		_read_gpio();
 80008ea:	f7ff ff01 	bl	80006f0 <_read_gpio>
		adc_avgs[0] = _adc_avg(adc_buffer[0], adc_vals[0], ADC_SAMPLE_NUM);
 80008ee:	4b37      	ldr	r3, [pc, #220]	; (80009cc <USER_Loop+0x104>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	220a      	movs	r2, #10
 80008f4:	4619      	mov	r1, r3
 80008f6:	4836      	ldr	r0, [pc, #216]	; (80009d0 <USER_Loop+0x108>)
 80008f8:	f7ff ff7a 	bl	80007f0 <_adc_avg>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <USER_Loop+0x10c>)
 8000902:	801a      	strh	r2, [r3, #0]
		adc_avgs[1] = _adc_avg(adc_buffer[1], adc_vals[1], ADC_SAMPLE_NUM);
 8000904:	4b31      	ldr	r3, [pc, #196]	; (80009cc <USER_Loop+0x104>)
 8000906:	885b      	ldrh	r3, [r3, #2]
 8000908:	220a      	movs	r2, #10
 800090a:	4619      	mov	r1, r3
 800090c:	4832      	ldr	r0, [pc, #200]	; (80009d8 <USER_Loop+0x110>)
 800090e:	f7ff ff6f 	bl	80007f0 <_adc_avg>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <USER_Loop+0x10c>)
 8000918:	805a      	strh	r2, [r3, #2]
		//adc_avgs[2] = _adc_avg(adc_buffer[2], adc_vals[2], ADC_SAMPLE_NUM);
		//if(adc_avgs[0] > ADC_IDLE0) bitset(gpio_state_bits, 6); else bitclear(gpio_state_bits, 6);
		//if(adc_avgs[1] > ADC_IDLE1) bitset(gpio_state_bits, 7); else bitclear(gpio_state_bits, 7);
		//if(adc_avgs[2] > ADC_IDLE2) bitset(gpio_state_bits, 8); else bitclear(gpio_state_bits, 8);
		
		tx_buffer[0] = gpio_state_bits[0]&0xFF;
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <USER_Loop+0x114>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <USER_Loop+0x118>)
 8000922:	701a      	strb	r2, [r3, #0]
		tx_buffer[1] = (gpio_state_bits[0]>>8)&0xFF;
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <USER_Loop+0x114>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <USER_Loop+0x118>)
 8000930:	705a      	strb	r2, [r3, #1]
		tx_buffer[2] = gpio_state_bits[1]&0xFF;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <USER_Loop+0x114>)
 8000934:	885b      	ldrh	r3, [r3, #2]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <USER_Loop+0x118>)
 800093a:	709a      	strb	r2, [r3, #2]
		tmp = adc_avgs[0];
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <USER_Loop+0x10c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	80fb      	strh	r3, [r7, #6]
		tx_buffer[3] = tmp&0xFF;
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <USER_Loop+0x118>)
 8000948:	70da      	strb	r2, [r3, #3]
		tx_buffer[4] = (tmp>>8)&0xFF;
 800094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094e:	121b      	asrs	r3, r3, #8
 8000950:	b21b      	sxth	r3, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <USER_Loop+0x118>)
 8000956:	711a      	strb	r2, [r3, #4]
		tmp = adc_avgs[1];
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <USER_Loop+0x10c>)
 800095a:	885b      	ldrh	r3, [r3, #2]
 800095c:	80fb      	strh	r3, [r7, #6]
		tx_buffer[5] = tmp&0xFF;
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <USER_Loop+0x118>)
 8000964:	715a      	strb	r2, [r3, #5]
		tx_buffer[6] = (tmp>>8)&0xFF;
 8000966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800096a:	121b      	asrs	r3, r3, #8
 800096c:	b21b      	sxth	r3, r3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <USER_Loop+0x118>)
 8000972:	719a      	strb	r2, [r3, #6]
		//tmp = adc_avgs[2];
		//tx_buffer[6] = tmp&0xFF;
		//tx_buffer[7] = (tmp>>8)&0xFF;
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, tx_buffer, TX_BUFFER_SIZE); 
 8000974:	2207      	movs	r2, #7
 8000976:	491a      	ldr	r1, [pc, #104]	; (80009e0 <USER_Loop+0x118>)
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <USER_Loop+0x11c>)
 800097a:	f006 fc6b 	bl	8007254 <USBD_CUSTOM_HID_SendReport>
		flg_1ms = 0; 
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <USER_Loop+0x100>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
	}
	if (timer_ms > timer_next_500ms) {
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <USER_Loop+0x120>)
 8000986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800098a:	4918      	ldr	r1, [pc, #96]	; (80009ec <USER_Loop+0x124>)
 800098c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000990:	4290      	cmp	r0, r2
 8000992:	eb71 0303 	sbcs.w	r3, r1, r3
 8000996:	d20e      	bcs.n	80009b6 <USER_Loop+0xee>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <USER_Loop+0x128>)
 800099e:	f001 f942 	bl	8001c26 <HAL_GPIO_TogglePin>
		timer_next_500ms = timer_ms + 500;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <USER_Loop+0x120>)
 80009a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a8:	f512 74fa 	adds.w	r4, r2, #500	; 0x1f4
 80009ac:	f143 0500 	adc.w	r5, r3, #0
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <USER_Loop+0x124>)
 80009b2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bdb0      	pop	{r4, r5, r7, pc}
 80009be:	bf00      	nop
 80009c0:	200002e0 	.word	0x200002e0
 80009c4:	200002a0 	.word	0x200002a0
 80009c8:	200002e1 	.word	0x200002e1
 80009cc:	2000025c 	.word	0x2000025c
 80009d0:	2000026c 	.word	0x2000026c
 80009d4:	20000294 	.word	0x20000294
 80009d8:	20000280 	.word	0x20000280
 80009dc:	20000258 	.word	0x20000258
 80009e0:	20000298 	.word	0x20000298
 80009e4:	200002f8 	.word	0x200002f8
 80009e8:	200002e8 	.word	0x200002e8
 80009ec:	20000008 	.word	0x20000008
 80009f0:	40011000 	.word	0x40011000

080009f4 <TIM4_ISR>:

void TIM4_ISR(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	timer_ms++;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <TIM4_ISR+0x24>)
 80009fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fe:	1c50      	adds	r0, r2, #1
 8000a00:	f143 0100 	adc.w	r1, r3, #0
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <TIM4_ISR+0x24>)
 8000a06:	e9c3 0100 	strd	r0, r1, [r3]
	flg_1ms = 1;
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <TIM4_ISR+0x28>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	200002e8 	.word	0x200002e8
 8000a1c:	200002e1 	.word	0x200002e1

08000a20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff fe60 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a26:	490c      	ldr	r1, [pc, #48]	; (8000a58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a28:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a3c:	4c09      	ldr	r4, [pc, #36]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f008 f961 	bl	8008d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fb7d 	bl	800014c <main>
  bx lr
 8000a52:	4770      	bx	lr
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000a5c:	08008e84 	.word	0x08008e84
  ldr r2, =_sbss
 8000a60:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000a64:	20000b04 	.word	0x20000b04

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_Init+0x28>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_Init+0x28>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 fcef 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fd22 	bl	80004d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fd07 	bl	80014ca <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	f000 fccf 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000014 	.word	0x20000014
 8000af4:	20000010 	.word	0x20000010

08000af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x1c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x20>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <HAL_IncTick+0x20>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000014 	.word	0x20000014
 8000b18:	200002f0 	.word	0x200002f0

08000b1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <HAL_GetTick+0x10>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	200002f0 	.word	0x200002f0

08000b30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e0be      	b.n	8000cd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d109      	bne.n	8000b74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fce0 	bl	8000534 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 faff 	bl	8001178 <ADC_ConversionStop_Disable>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8099 	bne.w	8000cbe <HAL_ADC_Init+0x18e>
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8095 	bne.w	8000cbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b9c:	f023 0302 	bic.w	r3, r3, #2
 8000ba0:	f043 0202 	orr.w	r2, r3, #2
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7b1b      	ldrb	r3, [r3, #12]
 8000bb6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bc8:	d003      	beq.n	8000bd2 <HAL_ADC_Init+0xa2>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d102      	bne.n	8000bd8 <HAL_ADC_Init+0xa8>
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	e000      	b.n	8000bda <HAL_ADC_Init+0xaa>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7d1b      	ldrb	r3, [r3, #20]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d119      	bne.n	8000c1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7b1b      	ldrb	r3, [r3, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	035a      	lsls	r2, r3, #13
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	e00b      	b.n	8000c1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	f043 0220 	orr.w	r2, r3, #32
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	f043 0201 	orr.w	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_ADC_Init+0x1a8>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	430b      	orrs	r3, r1
 8000c42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c4c:	d003      	beq.n	8000c56 <HAL_ADC_Init+0x126>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d104      	bne.n	8000c60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	051b      	lsls	r3, r3, #20
 8000c5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_ADC_Init+0x1ac>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d10b      	bne.n	8000c9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	f043 0201 	orr.w	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9a:	e018      	b.n	8000cce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	f023 0312 	bic.w	r3, r3, #18
 8000ca4:	f043 0210 	orr.w	r2, r3, #16
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb0:	f043 0201 	orr.w	r2, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cbc:	e007      	b.n	8000cce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f043 0210 	orr.w	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	ffe1f7fd 	.word	0xffe1f7fd
 8000cdc:	ff1f0efe 	.word	0xff1f0efe

08000ce0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a64      	ldr	r2, [pc, #400]	; (8000e88 <HAL_ADC_Start_DMA+0x1a8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d004      	beq.n	8000d04 <HAL_ADC_Start_DMA+0x24>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a63      	ldr	r2, [pc, #396]	; (8000e8c <HAL_ADC_Start_DMA+0x1ac>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d106      	bne.n	8000d12 <HAL_ADC_Start_DMA+0x32>
 8000d04:	4b60      	ldr	r3, [pc, #384]	; (8000e88 <HAL_ADC_Start_DMA+0x1a8>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 80b3 	bne.w	8000e78 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_ADC_Start_DMA+0x40>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e0ae      	b.n	8000e7e <HAL_ADC_Start_DMA+0x19e>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 f9cb 	bl	80010c4 <ADC_Enable>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 809a 	bne.w	8000e6e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <HAL_ADC_Start_DMA+0x1ac>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d105      	bne.n	8000d64 <HAL_ADC_Start_DMA+0x84>
 8000d58:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <HAL_ADC_Start_DMA+0x1a8>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d115      	bne.n	8000d90 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d026      	beq.n	8000dcc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d8e:	e01d      	b.n	8000dcc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a39      	ldr	r2, [pc, #228]	; (8000e88 <HAL_ADC_Start_DMA+0x1a8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d004      	beq.n	8000db0 <HAL_ADC_Start_DMA+0xd0>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a38      	ldr	r2, [pc, #224]	; (8000e8c <HAL_ADC_Start_DMA+0x1ac>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d10d      	bne.n	8000dcc <HAL_ADC_Start_DMA+0xec>
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <HAL_ADC_Start_DMA+0x1a8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	f023 0206 	bic.w	r2, r3, #6
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de4:	e002      	b.n	8000dec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <HAL_ADC_Start_DMA+0x1b0>)
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6a1b      	ldr	r3, [r3, #32]
 8000e00:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <HAL_ADC_Start_DMA+0x1b4>)
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <HAL_ADC_Start_DMA+0x1b8>)
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f06f 0202 	mvn.w	r2, #2
 8000e14:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e24:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6a18      	ldr	r0, [r3, #32]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	334c      	adds	r3, #76	; 0x4c
 8000e30:	4619      	mov	r1, r3
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f000 fbaf 	bl	8001598 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e48:	d108      	bne.n	8000e5c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e58:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e5a:	e00f      	b.n	8000e7c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e6a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e6c:	e006      	b.n	8000e7c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e76:	e001      	b.n	8000e7c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40012800 	.word	0x40012800
 8000e90:	080011fb 	.word	0x080011fb
 8000e94:	08001277 	.word	0x08001277
 8000e98:	08001293 	.word	0x08001293

08000e9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_ADC_ConfigChannel+0x20>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e0dc      	b.n	80010ae <HAL_ADC_ConfigChannel+0x1da>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b06      	cmp	r3, #6
 8000f02:	d81c      	bhi.n	8000f3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3b05      	subs	r3, #5
 8000f16:	221f      	movs	r2, #31
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4019      	ands	r1, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3b05      	subs	r3, #5
 8000f30:	fa00 f203 	lsl.w	r2, r0, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3c:	e03c      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d81c      	bhi.n	8000f80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b23      	subs	r3, #35	; 0x23
 8000f58:	221f      	movs	r2, #31
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	4019      	ands	r1, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	3b23      	subs	r3, #35	; 0x23
 8000f72:	fa00 f203 	lsl.w	r2, r0, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f7e:	e01b      	b.n	8000fb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b41      	subs	r3, #65	; 0x41
 8000f92:	221f      	movs	r2, #31
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	3b41      	subs	r3, #65	; 0x41
 8000fac:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	d91c      	bls.n	8000ffa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68d9      	ldr	r1, [r3, #12]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b1e      	subs	r3, #30
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4019      	ands	r1, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6898      	ldr	r0, [r3, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b1e      	subs	r3, #30
 8000fec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	e019      	b.n	800102e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6919      	ldr	r1, [r3, #16]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	2207      	movs	r2, #7
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	4019      	ands	r1, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6898      	ldr	r0, [r3, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	fa00 f203 	lsl.w	r2, r0, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b10      	cmp	r3, #16
 8001034:	d003      	beq.n	800103e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800103a:	2b11      	cmp	r3, #17
 800103c:	d132      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d125      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d126      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001064:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b10      	cmp	r3, #16
 800106c:	d11a      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_ADC_ConfigChannel+0x1e8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9a      	lsrs	r2, r3, #18
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001084:	e002      	b.n	800108c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3b01      	subs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <HAL_ADC_ConfigChannel+0x1b2>
 8001092:	e007      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f043 0220 	orr.w	r2, r3, #32
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40012400 	.word	0x40012400
 80010bc:	20000000 	.word	0x20000000
 80010c0:	431bde83 	.word	0x431bde83

080010c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d040      	beq.n	8001164 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0201 	orr.w	r2, r2, #1
 80010f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <ADC_Enable+0xac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <ADC_Enable+0xb0>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0c9b      	lsrs	r3, r3, #18
 80010fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001100:	e002      	b.n	8001108 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3b01      	subs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f9      	bne.n	8001102 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800110e:	f7ff fd05 	bl	8000b1c <HAL_GetTick>
 8001112:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001114:	e01f      	b.n	8001156 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001116:	f7ff fd01 	bl	8000b1c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d918      	bls.n	8001156 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d011      	beq.n	8001156 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e007      	b.n	8001166 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d1d8      	bne.n	8001116 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000
 8001174:	431bde83 	.word	0x431bde83

08001178 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d12e      	bne.n	80011f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011a2:	f7ff fcbb 	bl	8000b1c <HAL_GetTick>
 80011a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011a8:	e01b      	b.n	80011e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011aa:	f7ff fcb7 	bl	8000b1c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d914      	bls.n	80011e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10d      	bne.n	80011e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f043 0210 	orr.w	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e007      	b.n	80011f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d0dc      	beq.n	80011aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001210:	2b00      	cmp	r3, #0
 8001212:	d127      	bne.n	8001264 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800122a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800122e:	d115      	bne.n	800125c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff fe1d 	bl	8000e9c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001262:	e004      	b.n	800126e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7ff fe12 	bl	8000eae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f043 0204 	orr.w	r2, r3, #4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff fe01 	bl	8000ec0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <__NVIC_EnableIRQ+0x34>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e043      	b.n	8001582 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_DMA_Init+0xa8>)
 8001502:	4413      	add	r3, r2
 8001504:	4a22      	ldr	r2, [pc, #136]	; (8001590 <HAL_DMA_Init+0xac>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_DMA_Init+0xb0>)
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800152e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	bffdfff8 	.word	0xbffdfff8
 8001590:	cccccccd 	.word	0xcccccccd
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_DMA_Start_IT+0x20>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e04b      	b.n	8001650 <HAL_DMA_Start_IT+0xb8>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d13a      	bne.n	8001642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f937 	bl	8001864 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 020e 	orr.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e00f      	b.n	8001630 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0204 	bic.w	r2, r2, #4
 800161e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 020a 	orr.w	r2, r2, #10
 800162e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e005      	b.n	800164e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800164a:	2302      	movs	r3, #2
 800164c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800164e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	2204      	movs	r2, #4
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d04f      	beq.n	8001720 <HAL_DMA_IRQHandler+0xc8>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d04a      	beq.n	8001720 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0204 	bic.w	r2, r2, #4
 80016a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a66      	ldr	r2, [pc, #408]	; (8001848 <HAL_DMA_IRQHandler+0x1f0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d029      	beq.n	8001706 <HAL_DMA_IRQHandler+0xae>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_DMA_IRQHandler+0x1f4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d022      	beq.n	8001702 <HAL_DMA_IRQHandler+0xaa>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a63      	ldr	r2, [pc, #396]	; (8001850 <HAL_DMA_IRQHandler+0x1f8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01a      	beq.n	80016fc <HAL_DMA_IRQHandler+0xa4>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a62      	ldr	r2, [pc, #392]	; (8001854 <HAL_DMA_IRQHandler+0x1fc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d012      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x9e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a60      	ldr	r2, [pc, #384]	; (8001858 <HAL_DMA_IRQHandler+0x200>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x98>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5f      	ldr	r2, [pc, #380]	; (800185c <HAL_DMA_IRQHandler+0x204>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d102      	bne.n	80016ea <HAL_DMA_IRQHandler+0x92>
 80016e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e8:	e00e      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016ee:	e00b      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016f4:	e008      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016fa:	e005      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001700:	e002      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	e000      	b.n	8001708 <HAL_DMA_IRQHandler+0xb0>
 8001706:	2304      	movs	r3, #4
 8001708:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_DMA_IRQHandler+0x208>)
 800170a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 8094 	beq.w	800183e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800171e:	e08e      	b.n	800183e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2202      	movs	r2, #2
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d056      	beq.n	80017de <HAL_DMA_IRQHandler+0x186>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d051      	beq.n	80017de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 020a 	bic.w	r2, r2, #10
 8001756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <HAL_DMA_IRQHandler+0x1f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d029      	beq.n	80017be <HAL_DMA_IRQHandler+0x166>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a37      	ldr	r2, [pc, #220]	; (800184c <HAL_DMA_IRQHandler+0x1f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d022      	beq.n	80017ba <HAL_DMA_IRQHandler+0x162>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a35      	ldr	r2, [pc, #212]	; (8001850 <HAL_DMA_IRQHandler+0x1f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x15c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a34      	ldr	r2, [pc, #208]	; (8001854 <HAL_DMA_IRQHandler+0x1fc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d012      	beq.n	80017ae <HAL_DMA_IRQHandler+0x156>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_DMA_IRQHandler+0x200>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x150>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_DMA_IRQHandler+0x204>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x14a>
 800179c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017a0:	e00e      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a6:	e00b      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ac:	e008      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b2:	e005      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b8:	e002      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017ba:	2320      	movs	r3, #32
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_IRQHandler+0x168>
 80017be:	2302      	movs	r3, #2
 80017c0:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_DMA_IRQHandler+0x208>)
 80017c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d034      	beq.n	800183e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017dc:	e02f      	b.n	800183e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2208      	movs	r2, #8
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d028      	beq.n	8001840 <HAL_DMA_IRQHandler+0x1e8>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d023      	beq.n	8001840 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020e 	bic.w	r2, r2, #14
 8001806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
    }
  }
  return;
 800183e:	bf00      	nop
 8001840:	bf00      	nop
}
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020008 	.word	0x40020008
 800184c:	4002001c 	.word	0x4002001c
 8001850:	40020030 	.word	0x40020030
 8001854:	40020044 	.word	0x40020044
 8001858:	40020058 	.word	0x40020058
 800185c:	4002006c 	.word	0x4002006c
 8001860:	40020000 	.word	0x40020000

08001864 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b10      	cmp	r3, #16
 8001890:	d108      	bne.n	80018a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018a2:	e007      	b.n	80018b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	e169      	b.n	8001ba8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d4:	2201      	movs	r2, #1
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8158 	bne.w	8001ba2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4a9a      	ldr	r2, [pc, #616]	; (8001b60 <HAL_GPIO_Init+0x2a0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d05e      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 80018fc:	4a98      	ldr	r2, [pc, #608]	; (8001b60 <HAL_GPIO_Init+0x2a0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d875      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001902:	4a98      	ldr	r2, [pc, #608]	; (8001b64 <HAL_GPIO_Init+0x2a4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d058      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001908:	4a96      	ldr	r2, [pc, #600]	; (8001b64 <HAL_GPIO_Init+0x2a4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d86f      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800190e:	4a96      	ldr	r2, [pc, #600]	; (8001b68 <HAL_GPIO_Init+0x2a8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d052      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001914:	4a94      	ldr	r2, [pc, #592]	; (8001b68 <HAL_GPIO_Init+0x2a8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d869      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800191a:	4a94      	ldr	r2, [pc, #592]	; (8001b6c <HAL_GPIO_Init+0x2ac>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d04c      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001920:	4a92      	ldr	r2, [pc, #584]	; (8001b6c <HAL_GPIO_Init+0x2ac>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d863      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001926:	4a92      	ldr	r2, [pc, #584]	; (8001b70 <HAL_GPIO_Init+0x2b0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d046      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 800192c:	4a90      	ldr	r2, [pc, #576]	; (8001b70 <HAL_GPIO_Init+0x2b0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d85d      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d82a      	bhi.n	800198c <HAL_GPIO_Init+0xcc>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d859      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <HAL_GPIO_Init+0x80>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	080019bb 	.word	0x080019bb
 8001944:	08001995 	.word	0x08001995
 8001948:	080019a7 	.word	0x080019a7
 800194c:	080019e9 	.word	0x080019e9
 8001950:	080019ef 	.word	0x080019ef
 8001954:	080019ef 	.word	0x080019ef
 8001958:	080019ef 	.word	0x080019ef
 800195c:	080019ef 	.word	0x080019ef
 8001960:	080019ef 	.word	0x080019ef
 8001964:	080019ef 	.word	0x080019ef
 8001968:	080019ef 	.word	0x080019ef
 800196c:	080019ef 	.word	0x080019ef
 8001970:	080019ef 	.word	0x080019ef
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019ef 	.word	0x080019ef
 800197c:	080019ef 	.word	0x080019ef
 8001980:	080019ef 	.word	0x080019ef
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019b1 	.word	0x080019b1
 800198c:	4a79      	ldr	r2, [pc, #484]	; (8001b74 <HAL_GPIO_Init+0x2b4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001992:	e02c      	b.n	80019ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e029      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	3304      	adds	r3, #4
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e024      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	3308      	adds	r3, #8
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e01f      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	330c      	adds	r3, #12
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e01a      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c2:	2304      	movs	r3, #4
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e013      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d0:	2308      	movs	r3, #8
 80019d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	611a      	str	r2, [r3, #16]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	615a      	str	r2, [r3, #20]
          break;
 80019e6:	e003      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          break;
 80019ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	d801      	bhi.n	80019fa <HAL_GPIO_Init+0x13a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_Init+0x13e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	; 0xff
 8001a04:	d802      	bhi.n	8001a0c <HAL_GPIO_Init+0x14c>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x152>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	210f      	movs	r1, #15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80b1 	beq.w	8001ba2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a58:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a40      	ldr	r2, [pc, #256]	; (8001b80 <HAL_GPIO_Init+0x2c0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d013      	beq.n	8001aac <HAL_GPIO_Init+0x1ec>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3f      	ldr	r2, [pc, #252]	; (8001b84 <HAL_GPIO_Init+0x2c4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a3e      	ldr	r2, [pc, #248]	; (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3d      	ldr	r2, [pc, #244]	; (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_GPIO_Init+0x1e0>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e006      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e004      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_GPIO_Init+0x1ee>
 8001aac:	2300      	movs	r3, #0
 8001aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab0:	f002 0203 	and.w	r2, r2, #3
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4093      	lsls	r3, r2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001abe:	492f      	ldr	r1, [pc, #188]	; (8001b7c <HAL_GPIO_Init+0x2bc>)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	492c      	ldr	r1, [pc, #176]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4928      	ldr	r1, [pc, #160]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4922      	ldr	r1, [pc, #136]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	491e      	ldr	r1, [pc, #120]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4918      	ldr	r1, [pc, #96]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4914      	ldr	r1, [pc, #80]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d021      	beq.n	8001b94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e021      	b.n	8001ba2 <HAL_GPIO_Init+0x2e2>
 8001b5e:	bf00      	nop
 8001b60:	10320000 	.word	0x10320000
 8001b64:	10310000 	.word	0x10310000
 8001b68:	10220000 	.word	0x10220000
 8001b6c:	10210000 	.word	0x10210000
 8001b70:	10120000 	.word	0x10120000
 8001b74:	10110000 	.word	0x10110000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40011400 	.word	0x40011400
 8001b90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4909      	ldr	r1, [pc, #36]	; (8001bc4 <HAL_GPIO_Init+0x304>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f47f ae8e 	bne.w	80018d4 <HAL_GPIO_Init+0x14>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	372c      	adds	r7, #44	; 0x2c
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
 8001c02:	4613      	mov	r3, r2
 8001c04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c06:	787b      	ldrb	r3, [r7, #1]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	041a      	lsls	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c38:	887a      	ldrh	r2, [r7, #2]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	041a      	lsls	r2, r3, #16
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	400b      	ands	r3, r1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af06      	add	r7, sp, #24
 8001c5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0f1      	b.n	8001e4e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f006 fdb0 	bl	80087e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fdf9 	bl	8004888 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	602b      	str	r3, [r5, #0]
 8001cac:	1d33      	adds	r3, r6, #4
 8001cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb0:	6838      	ldr	r0, [r7, #0]
 8001cb2:	f002 fdc3 	bl	800483c <USB_CoreInit>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0c2      	b.n	8001e4e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fdf4 	bl	80048bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e040      	b.n	8001d5c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3301      	adds	r3, #1
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3303      	adds	r3, #3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3338      	adds	r3, #56	; 0x38
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	333c      	adds	r3, #60	; 0x3c
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3340      	adds	r3, #64	; 0x40
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3b9      	bcc.n	8001cda <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e044      	b.n	8001df6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3b5      	bcc.n	8001d6c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	687e      	ldr	r6, [r7, #4]
 8001e08:	466d      	mov	r5, sp
 8001e0a:	f106 0410 	add.w	r4, r6, #16
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	602b      	str	r3, [r5, #0]
 8001e16:	1d33      	adds	r3, r6, #4
 8001e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f002 fd5a 	bl	80048d4 <USB_DevInit>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00d      	b.n	8001e4e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 ffdb 	bl	8006e02 <USB_DevDisconnect>

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e56 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_PCD_Start+0x16>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e016      	b.n	8001e9a <HAL_PCD_Start+0x44>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fcef 	bl	800485c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e7e:	2101      	movs	r1, #1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f006 ff06 	bl	8008c92 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 ffaf 	bl	8006dee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b088      	sub	sp, #32
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 ffb1 	bl	8006e16 <USB_ReadInterrupts>
 8001eb4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fb04 	bl	80024ce <PCD_EP_ISR_Handler>

    return;
 8001ec6:	e119      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d013      	beq.n	8001efa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f006 fcf5 	bl	80088da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f905 	bl	8002102 <HAL_PCD_SetAddress>

    return;
 8001ef8:	e100      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f1c:	e0ee      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f40:	e0dc      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d027      	beq.n	8001f9c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0204 	bic.w	r2, r2, #4
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f006 fce5 	bl	800894c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f94:	b292      	uxth	r2, r2
 8001f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f9a:	e0af      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8083 	beq.w	80020ae <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	77fb      	strb	r3, [r7, #31]
 8001fac:	e010      	b.n	8001fd0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
 8001fbc:	8812      	ldrh	r2, [r2, #0]
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	443b      	add	r3, r7
 8001fc6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	77fb      	strb	r3, [r7, #31]
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
 8001fd2:	2b07      	cmp	r3, #7
 8001fd4:	d9eb      	bls.n	8001fae <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	b292      	uxth	r2, r2
 8002002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002006:	bf00      	nop
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002010:	b29b      	uxth	r3, r3
 8002012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f6      	beq.n	8002008 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202c:	b292      	uxth	r2, r2
 800202e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002032:	2300      	movs	r3, #0
 8002034:	77fb      	strb	r3, [r7, #31]
 8002036:	e00f      	b.n	8002058 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002038:	7ffb      	ldrb	r3, [r7, #31]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4611      	mov	r1, r2
 8002040:	7ffa      	ldrb	r2, [r7, #31]
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	440a      	add	r2, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	3320      	adds	r3, #32
 800204a:	443b      	add	r3, r7
 800204c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002050:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	3301      	adds	r3, #1
 8002056:	77fb      	strb	r3, [r7, #31]
 8002058:	7ffb      	ldrb	r3, [r7, #31]
 800205a:	2b07      	cmp	r3, #7
 800205c:	d9ec      	bls.n	8002038 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0208 	orr.w	r2, r2, #8
 8002070:	b292      	uxth	r2, r2
 8002072:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002088:	b292      	uxth	r2, r2
 800208a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0204 	orr.w	r2, r2, #4
 80020a0:	b292      	uxth	r2, r2
 80020a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f006 fc36 	bl	8008918 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020ac:	e026      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00f      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020ca:	b292      	uxth	r2, r2
 80020cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f006 fbf4 	bl	80088be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80020d6:	e011      	b.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f4:	b292      	uxth	r2, r2
 80020f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020fa:	bf00      	nop
  }
}
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_PCD_SetAddress+0x1a>
 8002118:	2302      	movs	r3, #2
 800211a:	e013      	b.n	8002144 <HAL_PCD_SetAddress+0x42>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fe47 	bl	8006dc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	70fb      	strb	r3, [r7, #3]
 800215e:	460b      	mov	r3, r1
 8002160:	803b      	strh	r3, [r7, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800216a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	da0e      	bge.n	8002190 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	705a      	strb	r2, [r3, #1]
 800218e:	e00e      	b.n	80021ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 0207 	and.w	r2, r3, #7
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021ba:	883a      	ldrh	r2, [r7, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	78ba      	ldrb	r2, [r7, #2]
 80021c4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021c6:	78bb      	ldrb	r3, [r7, #2]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d102      	bne.n	80021d2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_PCD_EP_Open+0x94>
 80021dc:	2302      	movs	r3, #2
 80021de:	e00e      	b.n	80021fe <HAL_PCD_EP_Open+0xb2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fb90 	bl	8004914 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021fc:	7afb      	ldrb	r3, [r7, #11]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002216:	2b00      	cmp	r3, #0
 8002218:	da0e      	bge.n	8002238 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	705a      	strb	r2, [r3, #1]
 8002236:	e00e      	b.n	8002256 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_PCD_EP_Close+0x6a>
 800226c:	2302      	movs	r3, #2
 800226e:	e00e      	b.n	800228e <HAL_PCD_EP_Close+0x88>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	4618      	mov	r0, r3
 8002280:	f002 ff08 	bl	8005094 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	460b      	mov	r3, r1
 80022a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a6:	7afb      	ldrb	r3, [r7, #11]
 80022a8:	f003 0207 	and.w	r2, r3, #7
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d6:	7afb      	ldrb	r3, [r7, #11]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6979      	ldr	r1, [r7, #20]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f8bf 	bl	800546c <USB_EPStartXfer>

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	460b      	mov	r3, r1
 8002306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2201      	movs	r2, #1
 8002342:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	b2da      	uxtb	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6979      	ldr	r1, [r7, #20]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f888 	bl	800546c <USB_EPStartXfer>

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 0207 	and.w	r2, r3, #7
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d901      	bls.n	8002384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e04c      	b.n	800241e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0e      	bge.n	80023aa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e00c      	b.n	80023c4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_PCD_EP_SetStall+0x7e>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e01c      	b.n	800241e <HAL_PCD_EP_SetStall+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fbeb 	bl	8006bce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f004 fd10 	bl	8006e34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 020f 	and.w	r2, r3, #15
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	d901      	bls.n	8002444 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e040      	b.n	80024c6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da0e      	bge.n	800246a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	705a      	strb	r2, [r3, #1]
 8002468:	e00e      	b.n	8002488 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0207 	and.w	r2, r3, #7
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_PCD_EP_ClrStall+0x82>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e00e      	b.n	80024c6 <HAL_PCD_EP_ClrStall+0xa0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fbd9 	bl	8006c6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b096      	sub	sp, #88	; 0x58
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024d6:	e3bf      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80024f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 8179 	bne.w	80027ee <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d152      	bne.n	80025ae <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002518:	81fb      	strh	r3, [r7, #14]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002528:	b29b      	uxth	r3, r3
 800252a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3328      	adds	r3, #40	; 0x28
 8002530:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	3302      	adds	r3, #2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800255a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	441a      	add	r2, r3
 8002568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f006 f98b 	bl	800888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 836b 	beq.w	8002c58 <PCD_EP_ISR_Handler+0x78a>
 8002582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8366 	bne.w	8002c58 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002598:	b2da      	uxtb	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b292      	uxth	r2, r2
 80025a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025ac:	e354      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025b4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d034      	beq.n	8002636 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	3306      	adds	r3, #6
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002608:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800260a:	b29b      	uxth	r3, r3
 800260c:	f004 fc62 	bl	8006ed4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29a      	uxth	r2, r3
 8002618:	f640 738f 	movw	r3, #3983	; 0xf8f
 800261c:	4013      	ands	r3, r2
 800261e:	823b      	strh	r3, [r7, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	8a3a      	ldrh	r2, [r7, #16]
 8002626:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800262a:	b292      	uxth	r2, r2
 800262c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f006 f8fe 	bl	8008830 <HAL_PCD_SetupStageCallback>
 8002634:	e310      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002636:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800263a:	2b00      	cmp	r3, #0
 800263c:	f280 830c 	bge.w	8002c58 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	f640 738f 	movw	r3, #3983	; 0xf8f
 800264c:	4013      	ands	r3, r2
 800264e:	83fb      	strh	r3, [r7, #30]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	8bfa      	ldrh	r2, [r7, #30]
 8002656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800265a:	b292      	uxth	r2, r2
 800265c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002666:	b29b      	uxth	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	3306      	adds	r3, #6
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002688:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x1f8>
 8002692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d015      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a0:	6959      	ldr	r1, [r3, #20]
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f004 fc12 	bl	8006ed4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	441a      	add	r2, r3
 80026ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026bc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f006 f8c7 	bl	8008854 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80026d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 82bd 	bne.w	8002c58 <PCD_EP_ISR_Handler+0x78a>
 80026de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80026e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80026ea:	f000 82b5 	beq.w	8002c58 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	b29a      	uxth	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b3e      	cmp	r3, #62	; 0x3e
 8002724:	d91d      	bls.n	8002762 <PCD_EP_ISR_Handler+0x294>
 8002726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
 800272e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2b00      	cmp	r3, #0
 8002738:	d102      	bne.n	8002740 <PCD_EP_ISR_Handler+0x272>
 800273a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800273c:	3b01      	subs	r3, #1
 800273e:	647b      	str	r3, [r7, #68]	; 0x44
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29a      	uxth	r2, r3
 8002746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002748:	b29b      	uxth	r3, r3
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	b29b      	uxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275a:	b29a      	uxth	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	e026      	b.n	80027b0 <PCD_EP_ISR_Handler+0x2e2>
 8002762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <PCD_EP_ISR_Handler+0x2b2>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002778:	b29a      	uxth	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	e017      	b.n	80027b0 <PCD_EP_ISR_Handler+0x2e2>
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <PCD_EP_ISR_Handler+0x2cc>
 8002794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002796:	3301      	adds	r3, #1
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c0:	827b      	strh	r3, [r7, #18]
 80027c2:	8a7b      	ldrh	r3, [r7, #18]
 80027c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027c8:	827b      	strh	r3, [r7, #18]
 80027ca:	8a7b      	ldrh	r3, [r7, #18]
 80027cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027d0:	827b      	strh	r3, [r7, #18]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	8a7b      	ldrh	r3, [r7, #18]
 80027d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	8013      	strh	r3, [r2, #0]
 80027ec:	e234      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002802:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002806:	2b00      	cmp	r3, #0
 8002808:	f280 80fc 	bge.w	8002a04 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b29a      	uxth	r2, r3
 800281e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002822:	4013      	ands	r3, r2
 8002824:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800283a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283e:	b292      	uxth	r2, r2
 8002840:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002842:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	7b1b      	ldrb	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d125      	bne.n	80028ac <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	3306      	adds	r3, #6
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800288c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8092 	beq.w	80029ba <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289c:	6959      	ldr	r1, [r3, #20]
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	88da      	ldrh	r2, [r3, #6]
 80028a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80028a6:	f004 fb15 	bl	8006ed4 <USB_ReadPMA>
 80028aa:	e086      	b.n	80029ba <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ae:	78db      	ldrb	r3, [r3, #3]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d10a      	bne.n	80028ca <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028b8:	461a      	mov	r2, r3
 80028ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f9d9 	bl	8002c74 <HAL_PCD_EP_DB_Receive>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80028c8:	e077      	b.n	80029ba <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d024      	beq.n	8002972 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	3302      	adds	r3, #2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002950:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02e      	beq.n	80029ba <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002966:	891a      	ldrh	r2, [r3, #8]
 8002968:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800296c:	f004 fab2 	bl	8006ed4 <USB_ReadPMA>
 8002970:	e023      	b.n	80029ba <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297a:	b29b      	uxth	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	3306      	adds	r3, #6
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800299a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800299e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ac:	6959      	ldr	r1, [r3, #20]
 80029ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b0:	895a      	ldrh	r2, [r3, #10]
 80029b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029b6:	f004 fa8d 	bl	8006ed4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029c2:	441a      	add	r2, r3
 80029c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029d0:	441a      	add	r2, r3
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <PCD_EP_ISR_Handler+0x51c>
 80029de:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d206      	bcs.n	80029f8 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f005 ff2f 	bl	8008854 <HAL_PCD_DataOutStageCallback>
 80029f6:	e005      	b.n	8002a04 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fd34 	bl	800546c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8123 	beq.w	8002c58 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	78db      	ldrb	r3, [r3, #3]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	f040 80a2 	bne.w	8002bb0 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	7b1b      	ldrb	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8093 	beq.w	8002ba2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d046      	beq.n	8002b16 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d126      	bne.n	8002ade <PCD_EP_ISR_Handler+0x610>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	4413      	add	r3, r2
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	011a      	lsls	r2, r3, #4
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	801a      	strh	r2, [r3, #0]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	801a      	strh	r2, [r3, #0]
 8002adc:	e061      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x6d4>
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d15d      	bne.n	8002ba2 <PCD_EP_ISR_Handler+0x6d4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	4413      	add	r3, r2
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	011a      	lsls	r2, r3, #4
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	4413      	add	r3, r2
 8002b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	2200      	movs	r2, #0
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	e045      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d126      	bne.n	8002b72 <PCD_EP_ISR_Handler+0x6a4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	4413      	add	r3, r2
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	011a      	lsls	r2, r3, #4
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	e017      	b.n	8002ba2 <PCD_EP_ISR_Handler+0x6d4>
 8002b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d113      	bne.n	8002ba2 <PCD_EP_ISR_Handler+0x6d4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b88:	4413      	add	r3, r2
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	011a      	lsls	r2, r3, #4
 8002b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f005 fe6e 	bl	800888a <HAL_PCD_DataInStageCallback>
 8002bae:	e053      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002bb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d146      	bne.n	8002c4a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d907      	bls.n	8002c04 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002bfc:	1ad2      	subs	r2, r2, r3
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	e002      	b.n	8002c0a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f005 fe36 	bl	800888a <HAL_PCD_DataInStageCallback>
 8002c1e:	e01b      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c28:	441a      	add	r2, r3
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c36:	441a      	add	r2, r3
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fc12 	bl	800546c <USB_EPStartXfer>
 8002c48:	e006      	b.n	8002c58 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c4e:	461a      	mov	r2, r3
 8002c50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f91b 	bl	8002e8e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f6ff ac37 	blt.w	80024d8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3758      	adds	r7, #88	; 0x58
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d07e      	beq.n	8002d8a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	8b7b      	ldrh	r3, [r7, #26]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d306      	bcc.n	8002cce <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	8b7b      	ldrh	r3, [r7, #26]
 8002cc6:	1ad2      	subs	r2, r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	619a      	str	r2, [r3, #24]
 8002ccc:	e002      	b.n	8002cd4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d123      	bne.n	8002d24 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	833b      	strh	r3, [r7, #24]
 8002cf8:	8b3b      	ldrh	r3, [r7, #24]
 8002cfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cfe:	833b      	strh	r3, [r7, #24]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	8b3b      	ldrh	r3, [r7, #24]
 8002d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01f      	beq.n	8002d6e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d48:	82fb      	strh	r3, [r7, #22]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	441a      	add	r2, r3
 8002d58:	8afb      	ldrh	r3, [r7, #22]
 8002d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d6e:	8b7b      	ldrh	r3, [r7, #26]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8087 	beq.w	8002e84 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6959      	ldr	r1, [r3, #20]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	891a      	ldrh	r2, [r3, #8]
 8002d82:	8b7b      	ldrh	r3, [r7, #26]
 8002d84:	f004 f8a6 	bl	8006ed4 <USB_ReadPMA>
 8002d88:	e07c      	b.n	8002e84 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3306      	adds	r3, #6
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	8b7b      	ldrh	r3, [r7, #26]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d306      	bcc.n	8002dcc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	8b7b      	ldrh	r3, [r7, #26]
 8002dc4:	1ad2      	subs	r2, r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	619a      	str	r2, [r3, #24]
 8002dca:	e002      	b.n	8002dd2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d123      	bne.n	8002e22 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	83fb      	strh	r3, [r7, #30]
 8002df6:	8bfb      	ldrh	r3, [r7, #30]
 8002df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dfc:	83fb      	strh	r3, [r7, #30]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	8bfb      	ldrh	r3, [r7, #30]
 8002e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11f      	bne.n	8002e6c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	83bb      	strh	r3, [r7, #28]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	8bbb      	ldrh	r3, [r7, #28]
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e6c:	8b7b      	ldrh	r3, [r7, #26]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6959      	ldr	r1, [r3, #20]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	895a      	ldrh	r2, [r3, #10]
 8002e7e:	8b7b      	ldrh	r3, [r7, #26]
 8002e80:	f004 f828 	bl	8006ed4 <USB_ReadPMA>
    }
  }

  return count;
 8002e84:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b0a4      	sub	sp, #144	; 0x90
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 81dd 	beq.w	8003262 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d907      	bls.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ee8:	1ad2      	subs	r2, r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	e002      	b.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80b9 	bne.w	8003072 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	785b      	ldrb	r3, [r3, #1]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d126      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	011a      	lsls	r2, r3, #4
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	4413      	add	r3, r2
 8002f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	e01a      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d116      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	4413      	add	r3, r2
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	011a      	lsls	r2, r3, #4
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	4413      	add	r3, r2
 8002f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2200      	movs	r2, #0
 8002f8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	785b      	ldrb	r3, [r3, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d126      	bne.n	8002fe8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	011a      	lsls	r2, r3, #4
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	801a      	strh	r2, [r3, #0]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	801a      	strh	r2, [r3, #0]
 8002fe6:	e017      	b.n	8003018 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d113      	bne.n	8003018 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	4413      	add	r3, r2
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	011a      	lsls	r2, r3, #4
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	4413      	add	r3, r2
 800300c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2200      	movs	r2, #0
 8003016:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f005 fc33 	bl	800888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 82fc 	beq.w	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	82fb      	strh	r3, [r7, #22]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	8afb      	ldrh	r3, [r7, #22]
 800305c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306c:	b29b      	uxth	r3, r3
 800306e:	8013      	strh	r3, [r2, #0]
 8003070:	e2da      	b.n	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80030ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030bc:	b29b      	uxth	r3, r3
 80030be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 82ae 	bne.w	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030d4:	441a      	add	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030e2:	441a      	add	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d30b      	bcc.n	800310c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003104:	1ad2      	subs	r2, r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	621a      	str	r2, [r3, #32]
 800310a:	e017      	b.n	800313c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d108      	bne.n	8003126 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003114:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003124:	e00a      	b.n	800313c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2200      	movs	r2, #0
 800313a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	785b      	ldrb	r3, [r3, #1]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d165      	bne.n	8003210 <HAL_PCD_EP_DB_Transmit+0x382>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	4413      	add	r3, r2
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	011a      	lsls	r2, r3, #4
 8003162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003164:	4413      	add	r3, r2
 8003166:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003176:	b29a      	uxth	r2, r3
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003180:	2b3e      	cmp	r3, #62	; 0x3e
 8003182:	d91d      	bls.n	80031c0 <HAL_PCD_EP_DB_Transmit+0x332>
 8003184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
 800318c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_PCD_EP_DB_Transmit+0x310>
 8003198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319a:	3b01      	subs	r3, #1
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	029b      	lsls	r3, r3, #10
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	801a      	strh	r2, [r3, #0]
 80031be:	e044      	b.n	800324a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_PCD_EP_DB_Transmit+0x350>
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	801a      	strh	r2, [r3, #0]
 80031dc:	e035      	b.n	800324a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80031f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f4:	3301      	adds	r3, #1
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003200:	b29b      	uxth	r3, r3
 8003202:	029b      	lsls	r3, r3, #10
 8003204:	b29b      	uxth	r3, r3
 8003206:	4313      	orrs	r3, r2
 8003208:	b29a      	uxth	r2, r3
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	e01c      	b.n	800324a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d118      	bne.n	800324a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003226:	b29b      	uxth	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322c:	4413      	add	r3, r2
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	011a      	lsls	r2, r3, #4
 8003236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003238:	4413      	add	r3, r2
 800323a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
 8003240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003244:	b29a      	uxth	r2, r3
 8003246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003248:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6959      	ldr	r1, [r3, #20]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	891a      	ldrh	r2, [r3, #8]
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325a:	b29b      	uxth	r3, r3
 800325c:	f003 fdf5 	bl	8006e4a <USB_WritePMA>
 8003260:	e1e2      	b.n	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	3306      	adds	r3, #6
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800328a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003296:	429a      	cmp	r2, r3
 8003298:	d307      	bcc.n	80032aa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	619a      	str	r2, [r3, #24]
 80032a8:	e002      	b.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f040 80c0 	bne.w	800343a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d126      	bne.n	8003310 <HAL_PCD_EP_DB_Transmit+0x482>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d6:	4413      	add	r3, r2
 80032d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	011a      	lsls	r2, r3, #4
 80032e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032e2:	4413      	add	r3, r2
 80032e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003308:	b29a      	uxth	r2, r3
 800330a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e01a      	b.n	8003346 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d116      	bne.n	8003346 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	667b      	str	r3, [r7, #100]	; 0x64
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800332c:	4413      	add	r3, r2
 800332e:	667b      	str	r3, [r7, #100]	; 0x64
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	011a      	lsls	r2, r3, #4
 8003336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003338:	4413      	add	r3, r2
 800333a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800333e:	663b      	str	r3, [r7, #96]	; 0x60
 8003340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	677b      	str	r3, [r7, #116]	; 0x74
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d12b      	bne.n	80033ac <HAL_PCD_EP_DB_Transmit+0x51e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	4413      	add	r3, r2
 800336a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	011a      	lsls	r2, r3, #4
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	4413      	add	r3, r2
 8003376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800337a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800337e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338a:	b29a      	uxth	r2, r3
 800338c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003390:	801a      	strh	r2, [r3, #0]
 8003392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29b      	uxth	r3, r3
 800339a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800339e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e017      	b.n	80033dc <HAL_PCD_EP_DB_Transmit+0x54e>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d113      	bne.n	80033dc <HAL_PCD_EP_DB_Transmit+0x54e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c2:	4413      	add	r3, r2
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	011a      	lsls	r2, r3, #4
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	4413      	add	r3, r2
 80033d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033d4:	673b      	str	r3, [r7, #112]	; 0x70
 80033d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f005 fa51 	bl	800888a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 811a 	bne.w	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	b29b      	uxth	r3, r3
 8003436:	8013      	strh	r3, [r2, #0]
 8003438:	e0f6      	b.n	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d121      	bne.n	8003488 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	441a      	add	r2, r3
 8003470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800347c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	b29b      	uxth	r3, r3
 8003486:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800348e:	2b01      	cmp	r3, #1
 8003490:	f040 80ca 	bne.w	8003628 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800349c:	441a      	add	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034aa:	441a      	add	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d30b      	bcc.n	80034d4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	621a      	str	r2, [r3, #32]
 80034d2:	e017      	b.n	8003504 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80034dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034ec:	e00a      	b.n	8003504 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	657b      	str	r3, [r7, #84]	; 0x54
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d165      	bne.n	80035de <HAL_PCD_EP_DB_Transmit+0x750>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003526:	4413      	add	r3, r2
 8003528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011a      	lsls	r2, r3, #4
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	4413      	add	r3, r2
 8003534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003538:	65bb      	str	r3, [r7, #88]	; 0x58
 800353a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003544:	b29a      	uxth	r2, r3
 8003546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354e:	2b3e      	cmp	r3, #62	; 0x3e
 8003550:	d91d      	bls.n	800358e <HAL_PCD_EP_DB_Transmit+0x700>
 8003552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	66bb      	str	r3, [r7, #104]	; 0x68
 800355a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003568:	3b01      	subs	r3, #1
 800356a:	66bb      	str	r3, [r7, #104]	; 0x68
 800356c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29a      	uxth	r2, r3
 8003572:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003574:	b29b      	uxth	r3, r3
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	b29b      	uxth	r3, r3
 800357a:	4313      	orrs	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003586:	b29a      	uxth	r2, r3
 8003588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358a:	801a      	strh	r2, [r3, #0]
 800358c:	e041      	b.n	8003612 <HAL_PCD_EP_DB_Transmit+0x784>
 800358e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <HAL_PCD_EP_DB_Transmit+0x71e>
 8003596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a8:	801a      	strh	r2, [r3, #0]
 80035aa:	e032      	b.n	8003612 <HAL_PCD_EP_DB_Transmit+0x784>
 80035ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x738>
 80035c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c2:	3301      	adds	r3, #1
 80035c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	e019      	b.n	8003612 <HAL_PCD_EP_DB_Transmit+0x784>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d115      	bne.n	8003612 <HAL_PCD_EP_DB_Transmit+0x784>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	4413      	add	r3, r2
 80035f6:	657b      	str	r3, [r7, #84]	; 0x54
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	011a      	lsls	r2, r3, #4
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	4413      	add	r3, r2
 8003602:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003606:	653b      	str	r3, [r7, #80]	; 0x50
 8003608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800360c:	b29a      	uxth	r2, r3
 800360e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003610:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6959      	ldr	r1, [r3, #20]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	895a      	ldrh	r2, [r3, #10]
 800361e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003622:	b29b      	uxth	r3, r3
 8003624:	f003 fc11 	bl	8006e4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003642:	82bb      	strh	r3, [r7, #20]
 8003644:	8abb      	ldrh	r3, [r7, #20]
 8003646:	f083 0310 	eor.w	r3, r3, #16
 800364a:	82bb      	strh	r3, [r7, #20]
 800364c:	8abb      	ldrh	r3, [r7, #20]
 800364e:	f083 0320 	eor.w	r3, r3, #32
 8003652:	82bb      	strh	r3, [r7, #20]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	8abb      	ldrh	r3, [r7, #20]
 8003664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800366c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003674:	b29b      	uxth	r3, r3
 8003676:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3790      	adds	r7, #144	; 0x90
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	817b      	strh	r3, [r7, #10]
 8003690:	4613      	mov	r3, r2
 8003692:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e009      	b.n	80036cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b8:	897a      	ldrh	r2, [r7, #10]
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036cc:	893b      	ldrh	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	80da      	strh	r2, [r3, #6]
 80036e0:	e00b      	b.n	80036fa <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2201      	movs	r2, #1
 80036e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e272      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8087 	beq.w	8003836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b04      	cmp	r3, #4
 8003732:	d00c      	beq.n	800374e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003734:	4b8f      	ldr	r3, [pc, #572]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d112      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
 8003740:	4b8c      	ldr	r3, [pc, #560]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374e:	4b89      	ldr	r3, [pc, #548]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d06c      	beq.n	8003834 <HAL_RCC_OscConfig+0x12c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d168      	bne.n	8003834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e24c      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x76>
 8003770:	4b80      	ldr	r3, [pc, #512]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7f      	ldr	r2, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e02e      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x98>
 8003786:	4b7b      	ldr	r3, [pc, #492]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7a      	ldr	r2, [pc, #488]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b78      	ldr	r3, [pc, #480]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a77      	ldr	r2, [pc, #476]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0xbc>
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a71      	ldr	r2, [pc, #452]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037c4:	4b6b      	ldr	r3, [pc, #428]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6a      	ldr	r2, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd f99a 	bl	8000b1c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd f996 	bl	8000b1c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e200      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xe4>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd f986 	bl	8000b1c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd f982 	bl	8000b1c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1ec      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x10c>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003842:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x18c>
 800385a:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c0      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4939      	ldr	r1, [pc, #228]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fd f93b 	bl	8000b1c <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd f937 	bl	8000b1c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a1      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4927      	ldr	r1, [pc, #156]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd f91a 	bl	8000b1c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd f916 	bl	8000b1c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e180      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d03a      	beq.n	800398c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d019      	beq.n	8003952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <HAL_RCC_OscConfig+0x274>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fd f8fa 	bl	8000b1c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd f8f6 	bl	8000b1c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e160      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800394a:	2001      	movs	r0, #1
 800394c:	f000 fa9c 	bl	8003e88 <RCC_Delay>
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_OscConfig+0x274>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fd f8e0 	bl	8000b1c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003960:	f7fd f8dc 	bl	8000b1c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d908      	bls.n	8003980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e146      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	42420000 	.word	0x42420000
 800397c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b92      	ldr	r3, [pc, #584]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e9      	bne.n	8003960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a6 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b8b      	ldr	r3, [pc, #556]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10d      	bne.n	80039c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b85      	ldr	r3, [pc, #532]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	4b82      	ldr	r3, [pc, #520]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d118      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d2:	4b7f      	ldr	r3, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7e      	ldr	r2, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039de:	f7fd f89d 	bl	8000b1c <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e6:	f7fd f899 	bl	8000b1c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b64      	cmp	r3, #100	; 0x64
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e103      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x312>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6213      	str	r3, [r2, #32]
 8003a18:	e02d      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x334>
 8003a22:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a69      	ldr	r2, [pc, #420]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a66      	ldr	r2, [pc, #408]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x356>
 8003a44:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a60      	ldr	r2, [pc, #384]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a5e:	4b5b      	ldr	r3, [pc, #364]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a5a      	ldr	r2, [pc, #360]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	4b58      	ldr	r3, [pc, #352]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a57      	ldr	r2, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fd f84d 	bl	8000b1c <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd f849 	bl	8000b1c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0b1      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCC_OscConfig+0x37e>
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd f837 	bl	8000b1c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fd f833 	bl	8000b1c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e09b      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d061      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d146      	bne.n	8003b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fd f807 	bl	8000b1c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd f803 	bl	8000b1c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e06d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d108      	bne.n	8003b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4921      	ldr	r1, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a19      	ldr	r1, [r3, #32]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	491b      	ldr	r1, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fc ffd7 	bl	8000b1c <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fc ffd3 	bl	8000b1c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e03d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x46a>
 8003b90:	e035      	b.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fc ffc0 	bl	8000b1c <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fc ffbc 	bl	8000b1c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e026      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x498>
 8003bbe:	e01e      	b.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e019      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_OscConfig+0x500>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0d0      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c20:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d910      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 0207 	bic.w	r2, r3, #7
 8003c36:	4965      	ldr	r1, [pc, #404]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a52      	ldr	r2, [pc, #328]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	494d      	ldr	r1, [pc, #308]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d040      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e073      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06b      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4936      	ldr	r1, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fc ff0e 	bl	8000b1c <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fc ff0a 	bl	8000b1c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e053      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d210      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4922      	ldr	r1, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d9a:	f000 f821 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	490a      	ldr	r1, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	5ccb      	ldrb	r3, [r1, r3]
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fe6c 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08008dc8 	.word	0x08008dc8
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	20000010 	.word	0x20000010

08003de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x30>
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x36>
 8003e0e:	e027      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e12:	613b      	str	r3, [r7, #16]
      break;
 8003e14:	e027      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0c9b      	lsrs	r3, r3, #18
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e20:	5cd3      	ldrb	r3, [r2, r3]
 8003e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0c5b      	lsrs	r3, r3, #17
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e3a:	5cd3      	ldrb	r3, [r2, r3]
 8003e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e42:	fb03 f202 	mul.w	r2, r3, r2
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e004      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	613b      	str	r3, [r7, #16]
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e62:	613b      	str	r3, [r7, #16]
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	693b      	ldr	r3, [r7, #16]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	007a1200 	.word	0x007a1200
 8003e7c:	08008e68 	.word	0x08008e68
 8003e80:	08008e78 	.word	0x08008e78
 8003e84:	003d0900 	.word	0x003d0900

08003e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <RCC_Delay+0x34>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <RCC_Delay+0x38>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0a5b      	lsrs	r3, r3, #9
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea4:	bf00      	nop
  }
  while (Delay --);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f9      	bne.n	8003ea4 <RCC_Delay+0x1c>
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	10624dd3 	.word	0x10624dd3

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d07d      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee4:	4b4f      	ldr	r3, [pc, #316]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10d      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef0:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	4a4b      	ldr	r2, [pc, #300]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	61d3      	str	r3, [r2, #28]
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	4b46      	ldr	r3, [pc, #280]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d118      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f18:	4b43      	ldr	r3, [pc, #268]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a42      	ldr	r2, [pc, #264]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f24:	f7fc fdfa 	bl	8000b1c <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	e008      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2c:	f7fc fdf6 	bl	8000b1c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e06d      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02e      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d027      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f68:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f7e:	4a29      	ldr	r2, [pc, #164]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d014      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fc fdc5 	bl	8000b1c <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fc fdc1 	bl	8000b1c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e036      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ee      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4917      	ldr	r1, [pc, #92]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd0:	4b14      	ldr	r3, [pc, #80]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe8:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	490b      	ldr	r1, [pc, #44]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	4904      	ldr	r1, [pc, #16]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
 8004028:	40007000 	.word	0x40007000
 800402c:	42420440 	.word	0x42420440

08004030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e041      	b.n	80040c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fad6 	bl	8000608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4610      	mov	r0, r2
 8004070:	f000 fa7c 	bl	800456c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d001      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e03a      	b.n	800415e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a18      	ldr	r2, [pc, #96]	; (8004168 <HAL_TIM_Base_Start_IT+0x98>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x58>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004112:	d009      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x58>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <HAL_TIM_Base_Start_IT+0x9c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x58>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a13      	ldr	r2, [pc, #76]	; (8004170 <HAL_TIM_Base_Start_IT+0xa0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d010      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	e007      	b.n	800415c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800

08004174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0202 	mvn.w	r2, #2
 80041a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9bd 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9b0 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f9bf 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d122      	bne.n	8004224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0204 	mvn.w	r2, #4
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f993 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f986 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f995 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b08      	cmp	r3, #8
 8004230:	d122      	bne.n	8004278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b08      	cmp	r3, #8
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0208 	mvn.w	r2, #8
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2204      	movs	r2, #4
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f969 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f95c 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f96b 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b10      	cmp	r3, #16
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b10      	cmp	r3, #16
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0210 	mvn.w	r2, #16
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2208      	movs	r2, #8
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f93f 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f932 	bl	8004524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f941 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10e      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0201 	mvn.w	r2, #1
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f90d 	bl	8004512 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b80      	cmp	r3, #128	; 0x80
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b80      	cmp	r3, #128	; 0x80
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fa83 	bl	800482a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f905 	bl	800455a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b20      	cmp	r3, #32
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b20      	cmp	r3, #32
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0220 	mvn.w	r2, #32
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa4e 	bl	8004818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c>
 800439c:	2302      	movs	r3, #2
 800439e:	e0b4      	b.n	800450a <HAL_TIM_ConfigClockSource+0x186>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xd4>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_TIM_ConfigClockSource+0x172>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b70      	cmp	r3, #112	; 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xa6>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b60      	cmp	r3, #96	; 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x11a>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xfa>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x13a>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b30      	cmp	r3, #48	; 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	f000 f970 	bl	800471e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800444c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04f      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	f000 f959 	bl	800471e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f8d0 	bl	8004630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	; 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f927 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 800449c:	e02c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 f8ee 	bl	800468c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	; 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f917 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 f8b0 	bl	8004630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f907 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 f8fe 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a29      	ldr	r2, [pc, #164]	; (8004624 <TIM_Base_SetConfig+0xb8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00b      	beq.n	800459c <TIM_Base_SetConfig+0x30>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d007      	beq.n	800459c <TIM_Base_SetConfig+0x30>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a26      	ldr	r2, [pc, #152]	; (8004628 <TIM_Base_SetConfig+0xbc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_Base_SetConfig+0x30>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a25      	ldr	r2, [pc, #148]	; (800462c <TIM_Base_SetConfig+0xc0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <TIM_Base_SetConfig+0xb8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0x62>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0x62>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <TIM_Base_SetConfig+0xbc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0x62>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <TIM_Base_SetConfig+0xc0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a07      	ldr	r2, [pc, #28]	; (8004624 <TIM_Base_SetConfig+0xb8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d103      	bne.n	8004614 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800

08004630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 030a 	bic.w	r3, r3, #10
 800466c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f023 0210 	bic.w	r2, r3, #16
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	031b      	lsls	r3, r3, #12
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	621a      	str	r2, [r3, #32]
}
 80046e0:	bf00      	nop
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	f043 0307 	orr.w	r3, r3, #7
 800470c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800471e:	b480      	push	{r7}
 8004720:	b087      	sub	sp, #28
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004738:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	021a      	lsls	r2, r3, #8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	431a      	orrs	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004770:	2302      	movs	r3, #2
 8004772:	e046      	b.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a16      	ldr	r2, [pc, #88]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d009      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a10      	ldr	r2, [pc, #64]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10c      	bne.n	80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800

08004818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800483c:	b084      	sub	sp, #16
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	f107 0014 	add.w	r0, r7, #20
 800484a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	b004      	add	sp, #16
 800485a:	4770      	bx	lr

0800485c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800486c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004870:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004890:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004894:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048d4:	b084      	sub	sp, #16
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	f107 0014 	add.w	r0, r7, #20
 80048e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	b004      	add	sp, #16
 8004912:	4770      	bx	lr

08004914 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004914:	b480      	push	{r7}
 8004916:	b09d      	sub	sp, #116	; 0x74
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	78db      	ldrb	r3, [r3, #3]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d81f      	bhi.n	8004986 <USB_ActivateEndpoint+0x72>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <USB_ActivateEndpoint+0x38>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	0800495d 	.word	0x0800495d
 8004950:	08004979 	.word	0x08004979
 8004954:	0800498f 	.word	0x0800498f
 8004958:	0800496b 	.word	0x0800496b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800495c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004964:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004968:	e012      	b.n	8004990 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800496a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800496e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004972:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004976:	e00b      	b.n	8004990 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800497c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004980:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004984:	e004      	b.n	8004990 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800498c:	e000      	b.n	8004990 <USB_ActivateEndpoint+0x7c>
      break;
 800498e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80049e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	7b1b      	ldrb	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8178 	bne.w	8004cf2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8084 	beq.w	8004b14 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	011a      	lsls	r2, r3, #4
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	88db      	ldrh	r3, [r3, #6]
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	827b      	strh	r3, [r7, #18]
 8004a4e:	8a7b      	ldrh	r3, [r7, #18]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01b      	beq.n	8004a90 <USB_ActivateEndpoint+0x17c>
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	823b      	strh	r3, [r7, #16]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	8a3b      	ldrh	r3, [r7, #16]
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	78db      	ldrb	r3, [r3, #3]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d020      	beq.n	8004ada <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aae:	81bb      	strh	r3, [r7, #12]
 8004ab0:	89bb      	ldrh	r3, [r7, #12]
 8004ab2:	f083 0320 	eor.w	r3, r3, #32
 8004ab6:	81bb      	strh	r3, [r7, #12]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	89bb      	ldrh	r3, [r7, #12]
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]
 8004ad8:	e2d5      	b.n	8005086 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af0:	81fb      	strh	r3, [r7, #14]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	89fb      	ldrh	r3, [r7, #14]
 8004afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
 8004b12:	e2b8      	b.n	8005086 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	4413      	add	r3, r2
 8004b26:	633b      	str	r3, [r7, #48]	; 0x30
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	011a      	lsls	r2, r3, #4
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	88db      	ldrh	r3, [r3, #6]
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	4413      	add	r3, r2
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	011a      	lsls	r2, r3, #4
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	4413      	add	r3, r2
 8004b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	801a      	strh	r2, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b3e      	cmp	r3, #62	; 0x3e
 8004b82:	d91d      	bls.n	8004bc0 <USB_ActivateEndpoint+0x2ac>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <USB_ActivateEndpoint+0x28a>
 8004b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	029b      	lsls	r3, r3, #10
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	e026      	b.n	8004c0e <USB_ActivateEndpoint+0x2fa>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <USB_ActivateEndpoint+0x2ca>
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	e017      	b.n	8004c0e <USB_ActivateEndpoint+0x2fa>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <USB_ActivateEndpoint+0x2e4>
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	029b      	lsls	r3, r3, #10
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	4313      	orrs	r3, r2
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01b      	beq.n	8004c5e <USB_ActivateEndpoint+0x34a>
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3c:	843b      	strh	r3, [r7, #32]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	8c3b      	ldrh	r3, [r7, #32]
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d124      	bne.n	8004cb0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	83bb      	strh	r3, [r7, #28]
 8004c7e:	8bbb      	ldrh	r3, [r7, #28]
 8004c80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c84:	83bb      	strh	r3, [r7, #28]
 8004c86:	8bbb      	ldrh	r3, [r7, #28]
 8004c88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c8c:	83bb      	strh	r3, [r7, #28]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	8bbb      	ldrh	r3, [r7, #28]
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
 8004cae:	e1ea      	b.n	8005086 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	83fb      	strh	r3, [r7, #30]
 8004cc8:	8bfb      	ldrh	r3, [r7, #30]
 8004cca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cce:	83fb      	strh	r3, [r7, #30]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	441a      	add	r2, r3
 8004cda:	8bfb      	ldrh	r3, [r7, #30]
 8004cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	8013      	strh	r3, [r2, #0]
 8004cf0:	e1c9      	b.n	8005086 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d11e      	bne.n	8004d38 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
 8004d36:	e01d      	b.n	8004d74 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d84:	4413      	add	r3, r2
 8004d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	011a      	lsls	r2, r3, #4
 8004d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	891b      	ldrh	r3, [r3, #8]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	657b      	str	r3, [r7, #84]	; 0x54
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db8:	4413      	add	r3, r2
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011a      	lsls	r2, r3, #4
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dca:	653b      	str	r3, [r7, #80]	; 0x50
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	895b      	ldrh	r3, [r3, #10]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8093 	bne.w	8004f0c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004df6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01b      	beq.n	8004e3a <USB_ActivateEndpoint+0x526>
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01b      	beq.n	8004e8a <USB_ActivateEndpoint+0x576>
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ea2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ea4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ea8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004eaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004eac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eb0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
 8004f0a:	e0bc      	b.n	8005086 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004f1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01d      	beq.n	8004f64 <USB_ActivateEndpoint+0x650>
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01d      	beq.n	8004fbc <USB_ActivateEndpoint+0x6a8>
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d024      	beq.n	800500e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004fde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fe2:	f083 0320 	eor.w	r3, r3, #32
 8004fe6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005008:	b29b      	uxth	r3, r3
 800500a:	8013      	strh	r3, [r2, #0]
 800500c:	e01d      	b.n	800504a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005024:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005086:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800508a:	4618      	mov	r0, r3
 800508c:	3774      	adds	r7, #116	; 0x74
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005094:	b480      	push	{r7}
 8005096:	b08d      	sub	sp, #52	; 0x34
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	7b1b      	ldrb	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 808e 	bne.w	80051c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	785b      	ldrb	r3, [r3, #1]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d044      	beq.n	800513a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	81bb      	strh	r3, [r7, #12]
 80050be:	89bb      	ldrh	r3, [r7, #12]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <USB_DeactivateEndpoint+0x6c>
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	817b      	strh	r3, [r7, #10]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005116:	813b      	strh	r3, [r7, #8]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	893b      	ldrh	r3, [r7, #8]
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]
 8005138:	e192      	b.n	8005460 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	827b      	strh	r3, [r7, #18]
 8005148:	8a7b      	ldrh	r3, [r7, #18]
 800514a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01b      	beq.n	800518a <USB_DeactivateEndpoint+0xf6>
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	823b      	strh	r3, [r7, #16]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	441a      	add	r2, r3
 8005174:	8a3b      	ldrh	r3, [r7, #16]
 8005176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	81fb      	strh	r3, [r7, #14]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	89fb      	ldrh	r3, [r7, #14]
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]
 80051c2:	e14d      	b.n	8005460 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 80a5 	bne.w	8005318 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	843b      	strh	r3, [r7, #32]
 80051dc:	8c3b      	ldrh	r3, [r7, #32]
 80051de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01b      	beq.n	800521e <USB_DeactivateEndpoint+0x18a>
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	83fb      	strh	r3, [r7, #30]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	441a      	add	r2, r3
 8005208:	8bfb      	ldrh	r3, [r7, #30]
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	83bb      	strh	r3, [r7, #28]
 800522c:	8bbb      	ldrh	r3, [r7, #28]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01b      	beq.n	800526e <USB_DeactivateEndpoint+0x1da>
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	837b      	strh	r3, [r7, #26]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	8b7b      	ldrh	r3, [r7, #26]
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	833b      	strh	r3, [r7, #24]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	8b3b      	ldrh	r3, [r7, #24]
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	82fb      	strh	r3, [r7, #22]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8afb      	ldrh	r3, [r7, #22]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f4:	82bb      	strh	r3, [r7, #20]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	8abb      	ldrh	r3, [r7, #20]
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
 8005316:	e0a3      	b.n	8005460 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005326:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01b      	beq.n	8005368 <USB_DeactivateEndpoint+0x2d4>
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	b29b      	uxth	r3, r3
 8005366:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01b      	beq.n	80053b8 <USB_DeactivateEndpoint+0x324>
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	853b      	strh	r3, [r7, #40]	; 0x28
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005406:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800544c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3734      	adds	r7, #52	; 0x34
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b0c2      	sub	sp, #264	; 0x108
 8005470:	af00      	add	r7, sp, #0
 8005472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800547a:	6018      	str	r0, [r3, #0]
 800547c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005484:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b01      	cmp	r3, #1
 8005494:	f040 86b7 	bne.w	8006206 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d908      	bls.n	80054c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054c4:	e007      	b.n	80054d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80054d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	7b1b      	ldrb	r3, [r3, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d13a      	bne.n	800555c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6959      	ldr	r1, [r3, #20]
 80054f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	88da      	ldrh	r2, [r3, #6]
 80054fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005502:	b29b      	uxth	r3, r3
 8005504:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005508:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800550c:	6800      	ldr	r0, [r0, #0]
 800550e:	f001 fc9c 	bl	8006e4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	011a      	lsls	r2, r3, #4
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	f000 be1f 	b.w	800619a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800555c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	2b02      	cmp	r3, #2
 800556a:	f040 8462 	bne.w	8005e32 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800556e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	f240 83df 	bls.w	8005d4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800558c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80055b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	441a      	add	r2, r3
 80055d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	1ad2      	subs	r2, r2, r3
 80055fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 81c7 	beq.w	80059bc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800562e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	633b      	str	r3, [r7, #48]	; 0x30
 800563a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d177      	bne.n	800573a <USB_EPStartXfer+0x2ce>
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	4413      	add	r3, r2
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
 800566e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	011a      	lsls	r2, r3, #4
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	4413      	add	r3, r2
 8005680:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005690:	b29a      	uxth	r2, r3
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800569a:	2b3e      	cmp	r3, #62	; 0x3e
 800569c:	d921      	bls.n	80056e2 <USB_EPStartXfer+0x276>
 800569e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <USB_EPStartXfer+0x252>
 80056b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	4313      	orrs	r3, r2
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e050      	b.n	8005784 <USB_EPStartXfer+0x318>
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <USB_EPStartXfer+0x294>
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	e041      	b.n	8005784 <USB_EPStartXfer+0x318>
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <USB_EPStartXfer+0x2b4>
 8005716:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800571a:	3301      	adds	r3, #1
 800571c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29a      	uxth	r2, r3
 8005726:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800572a:	b29b      	uxth	r3, r3
 800572c:	029b      	lsls	r3, r3, #10
 800572e:	b29b      	uxth	r3, r3
 8005730:	4313      	orrs	r3, r2
 8005732:	b29a      	uxth	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e024      	b.n	8005784 <USB_EPStartXfer+0x318>
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d11c      	bne.n	8005784 <USB_EPStartXfer+0x318>
 800574a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005758:	b29b      	uxth	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	4413      	add	r3, r2
 8005760:	633b      	str	r3, [r7, #48]	; 0x30
 8005762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	011a      	lsls	r2, r3, #4
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	4413      	add	r3, r2
 8005774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577e:	b29a      	uxth	r2, r3
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	895b      	ldrh	r3, [r3, #10]
 8005790:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6959      	ldr	r1, [r3, #20]
 80057a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057b2:	6800      	ldr	r0, [r0, #0]
 80057b4:	f001 fb49 	bl	8006e4a <USB_WritePMA>
            ep->xfer_buff += len;
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c8:	441a      	add	r2, r3
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d90f      	bls.n	8005812 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80057f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6a1a      	ldr	r2, [r3, #32]
 80057fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	621a      	str	r2, [r3, #32]
 8005810:	e00e      	b.n	8005830 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2200      	movs	r2, #0
 800582e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d177      	bne.n	8005930 <USB_EPStartXfer+0x4c4>
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	4413      	add	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	011a      	lsls	r2, r3, #4
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	4413      	add	r3, r2
 8005876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005886:	b29a      	uxth	r2, r3
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005890:	2b3e      	cmp	r3, #62	; 0x3e
 8005892:	d921      	bls.n	80058d8 <USB_EPStartXfer+0x46c>
 8005894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800589e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <USB_EPStartXfer+0x448>
 80058aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	e056      	b.n	8005986 <USB_EPStartXfer+0x51a>
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <USB_EPStartXfer+0x48a>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e047      	b.n	8005986 <USB_EPStartXfer+0x51a>
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <USB_EPStartXfer+0x4aa>
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005910:	3301      	adds	r3, #1
 8005912:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29a      	uxth	r2, r3
 800591c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005920:	b29b      	uxth	r3, r3
 8005922:	029b      	lsls	r3, r3, #10
 8005924:	b29b      	uxth	r3, r3
 8005926:	4313      	orrs	r3, r2
 8005928:	b29a      	uxth	r2, r3
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e02a      	b.n	8005986 <USB_EPStartXfer+0x51a>
 8005930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d122      	bne.n	8005986 <USB_EPStartXfer+0x51a>
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	623b      	str	r3, [r7, #32]
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	4413      	add	r3, r2
 8005962:	623b      	str	r3, [r7, #32]
 8005964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	011a      	lsls	r2, r3, #4
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	4413      	add	r3, r2
 8005976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005980:	b29a      	uxth	r2, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	891b      	ldrh	r3, [r3, #8]
 8005992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6959      	ldr	r1, [r3, #20]
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059b4:	6800      	ldr	r0, [r0, #0]
 80059b6:	f001 fa48 	bl	8006e4a <USB_WritePMA>
 80059ba:	e3ee      	b.n	800619a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d177      	bne.n	8005abc <USB_EPStartXfer+0x650>
 80059cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ec:	4413      	add	r3, r2
 80059ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	011a      	lsls	r2, r3, #4
 80059fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a06:	647b      	str	r3, [r7, #68]	; 0x44
 8005a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1e:	d921      	bls.n	8005a64 <USB_EPStartXfer+0x5f8>
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <USB_EPStartXfer+0x5d4>
 8005a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e056      	b.n	8005b12 <USB_EPStartXfer+0x6a6>
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <USB_EPStartXfer+0x616>
 8005a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e047      	b.n	8005b12 <USB_EPStartXfer+0x6a6>
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USB_EPStartXfer+0x636>
 8005a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e02a      	b.n	8005b12 <USB_EPStartXfer+0x6a6>
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d122      	bne.n	8005b12 <USB_EPStartXfer+0x6a6>
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aec:	4413      	add	r3, r2
 8005aee:	653b      	str	r3, [r7, #80]	; 0x50
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	891b      	ldrh	r3, [r3, #8]
 8005b1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6959      	ldr	r1, [r3, #20]
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b40:	6800      	ldr	r0, [r0, #0]
 8005b42:	f001 f982 	bl	8006e4a <USB_WritePMA>
            ep->xfer_buff += len;
 8005b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b56:	441a      	add	r2, r3
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d90f      	bls.n	8005ba0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	1ad2      	subs	r2, r2, r3
 8005b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	621a      	str	r2, [r3, #32]
 8005b9e:	e00e      	b.n	8005bbe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d177      	bne.n	8005cca <USB_EPStartXfer+0x85e>
 8005bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	4413      	add	r3, r2
 8005bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	011a      	lsls	r2, r3, #4
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	801a      	strh	r2, [r3, #0]
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2c:	d921      	bls.n	8005c72 <USB_EPStartXfer+0x806>
 8005c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <USB_EPStartXfer+0x7e2>
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e050      	b.n	8005d14 <USB_EPStartXfer+0x8a8>
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <USB_EPStartXfer+0x824>
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e041      	b.n	8005d14 <USB_EPStartXfer+0x8a8>
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <USB_EPStartXfer+0x844>
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	3301      	adds	r3, #1
 8005cac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	029b      	lsls	r3, r3, #10
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	e024      	b.n	8005d14 <USB_EPStartXfer+0x8a8>
 8005cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d11c      	bne.n	8005d14 <USB_EPStartXfer+0x8a8>
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cee:	4413      	add	r3, r2
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	011a      	lsls	r2, r3, #4
 8005d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	895b      	ldrh	r3, [r3, #10]
 8005d20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6959      	ldr	r1, [r3, #20]
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d42:	6800      	ldr	r0, [r0, #0]
 8005d44:	f001 f881 	bl	8006e4a <USB_WritePMA>
 8005d48:	e227      	b.n	800619a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd6:	4413      	add	r3, r2
 8005dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	011a      	lsls	r2, r3, #4
 8005de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dea:	4413      	add	r3, r2
 8005dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005dfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	891b      	ldrh	r3, [r3, #8]
 8005e08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	f001 f80d 	bl	8006e4a <USB_WritePMA>
 8005e30:	e1b3      	b.n	800619a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80c6 	beq.w	8006004 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	673b      	str	r3, [r7, #112]	; 0x70
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d177      	bne.n	8005f84 <USB_EPStartXfer+0xb18>
 8005e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eb4:	4413      	add	r3, r2
 8005eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	011a      	lsls	r2, r3, #4
 8005ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ece:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee6:	d921      	bls.n	8005f2c <USB_EPStartXfer+0xac0>
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <USB_EPStartXfer+0xa9c>
 8005efe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f02:	3b01      	subs	r3, #1
 8005f04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	e050      	b.n	8005fce <USB_EPStartXfer+0xb62>
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <USB_EPStartXfer+0xade>
 8005f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e041      	b.n	8005fce <USB_EPStartXfer+0xb62>
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <USB_EPStartXfer+0xafe>
 8005f60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f64:	3301      	adds	r3, #1
 8005f66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	029b      	lsls	r3, r3, #10
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e024      	b.n	8005fce <USB_EPStartXfer+0xb62>
 8005f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d11c      	bne.n	8005fce <USB_EPStartXfer+0xb62>
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa8:	4413      	add	r3, r2
 8005faa:	673b      	str	r3, [r7, #112]	; 0x70
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	895b      	ldrh	r3, [r3, #10]
 8005fda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6959      	ldr	r1, [r3, #20]
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ff4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ff8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ffc:	6800      	ldr	r0, [r0, #0]
 8005ffe:	f000 ff24 	bl	8006e4a <USB_WritePMA>
 8006002:	e0ca      	b.n	800619a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d177      	bne.n	8006104 <USB_EPStartXfer+0xc98>
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006034:	4413      	add	r3, r2
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006048:	4413      	add	r3, r2
 800604a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800604e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605a:	b29a      	uxth	r2, r3
 800605c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	2b3e      	cmp	r3, #62	; 0x3e
 8006066:	d921      	bls.n	80060ac <USB_EPStartXfer+0xc40>
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <USB_EPStartXfer+0xc1c>
 800607e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006082:	3b01      	subs	r3, #1
 8006084:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29a      	uxth	r2, r3
 800608e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006092:	b29b      	uxth	r3, r3
 8006094:	029b      	lsls	r3, r3, #10
 8006096:	b29b      	uxth	r3, r3
 8006098:	4313      	orrs	r3, r2
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e05c      	b.n	8006166 <USB_EPStartXfer+0xcfa>
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <USB_EPStartXfer+0xc5e>
 80060b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	e04d      	b.n	8006166 <USB_EPStartXfer+0xcfa>
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USB_EPStartXfer+0xc7e>
 80060e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e030      	b.n	8006166 <USB_EPStartXfer+0xcfa>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d128      	bne.n	8006166 <USB_EPStartXfer+0xcfa>
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006130:	b29b      	uxth	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006138:	4413      	add	r3, r2
 800613a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800613e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	011a      	lsls	r2, r3, #4
 800614c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006150:	4413      	add	r3, r2
 8006152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006164:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	891b      	ldrh	r3, [r3, #8]
 8006172:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6959      	ldr	r1, [r3, #20]
 8006182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006186:	b29b      	uxth	r3, r3
 8006188:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800618c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006190:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006194:	6800      	ldr	r0, [r0, #0]
 8006196:	f000 fe58 	bl	8006e4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c0:	817b      	strh	r3, [r7, #10]
 80061c2:	897b      	ldrh	r3, [r7, #10]
 80061c4:	f083 0310 	eor.w	r3, r3, #16
 80061c8:	817b      	strh	r3, [r7, #10]
 80061ca:	897b      	ldrh	r3, [r7, #10]
 80061cc:	f083 0320 	eor.w	r3, r3, #32
 80061d0:	817b      	strh	r3, [r7, #10]
 80061d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	897b      	ldrh	r3, [r7, #10]
 80061ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8013      	strh	r3, [r2, #0]
 8006202:	f000 bcde 	b.w	8006bc2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	7b1b      	ldrb	r3, [r3, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 80bb 	bne.w	800638e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d917      	bls.n	8006264 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	619a      	str	r2, [r3, #24]
 8006262:	e00e      	b.n	8006282 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062a6:	4413      	add	r3, r2
 80062a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	011a      	lsls	r2, r3, #4
 80062ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062be:	4413      	add	r3, r2
 80062c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80062c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	2b3e      	cmp	r3, #62	; 0x3e
 80062e2:	d924      	bls.n	800632e <USB_EPStartXfer+0xec2>
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0xe98>
 80062fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29a      	uxth	r2, r3
 800630c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006310:	b29b      	uxth	r3, r3
 8006312:	029b      	lsls	r3, r3, #10
 8006314:	b29b      	uxth	r3, r3
 8006316:	4313      	orrs	r3, r2
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	f000 bc10 	b.w	8006b4e <USB_EPStartXfer+0x16e2>
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <USB_EPStartXfer+0xee4>
 8006336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29a      	uxth	r2, r3
 8006348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800634c:	801a      	strh	r2, [r3, #0]
 800634e:	e3fe      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <USB_EPStartXfer+0xf04>
 8006366:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800636a:	3301      	adds	r3, #1
 800636c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800637c:	b29b      	uxth	r3, r3
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	b29b      	uxth	r3, r3
 8006382:	4313      	orrs	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	e3df      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	78db      	ldrb	r3, [r3, #3]
 800639a:	2b02      	cmp	r3, #2
 800639c:	f040 8218 	bne.w	80067d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80063a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 809d 	bne.w	80064ec <USB_EPStartXfer+0x1080>
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063d6:	4413      	add	r3, r2
 80063d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	011a      	lsls	r2, r3, #4
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ee:	4413      	add	r3, r2
 80063f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b3e      	cmp	r3, #62	; 0x3e
 800641a:	d92b      	bls.n	8006474 <USB_EPStartXfer+0x1008>
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <USB_EPStartXfer+0xfe0>
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006446:	3b01      	subs	r3, #1
 8006448:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800644c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29a      	uxth	r2, r3
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006458:	b29b      	uxth	r3, r3
 800645a:	029b      	lsls	r3, r3, #10
 800645c:	b29b      	uxth	r3, r3
 800645e:	4313      	orrs	r3, r2
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646a:	b29a      	uxth	r2, r3
 800646c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e070      	b.n	8006556 <USB_EPStartXfer+0x10ea>
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10c      	bne.n	800649e <USB_EPStartXfer+0x1032>
 8006484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006494:	b29a      	uxth	r2, r3
 8006496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800649a:	801a      	strh	r2, [r3, #0]
 800649c:	e05b      	b.n	8006556 <USB_EPStartXfer+0x10ea>
 800649e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <USB_EPStartXfer+0x1062>
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c8:	3301      	adds	r3, #1
 80064ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e034      	b.n	8006556 <USB_EPStartXfer+0x10ea>
 80064ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d12c      	bne.n	8006556 <USB_EPStartXfer+0x10ea>
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800650a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006520:	4413      	add	r3, r2
 8006522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	011a      	lsls	r2, r3, #4
 8006534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006538:	4413      	add	r3, r2
 800653a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800653e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 809d 	bne.w	80066b0 <USB_EPStartXfer+0x1244>
 8006576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006592:	b29b      	uxth	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800659a:	4413      	add	r3, r2
 800659c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	011a      	lsls	r2, r3, #4
 80065ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065b2:	4413      	add	r3, r2
 80065b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b3e      	cmp	r3, #62	; 0x3e
 80065de:	d92b      	bls.n	8006638 <USB_EPStartXfer+0x11cc>
 80065e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <USB_EPStartXfer+0x11a4>
 8006606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660a:	3b01      	subs	r3, #1
 800660c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29a      	uxth	r2, r3
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661c:	b29b      	uxth	r3, r3
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	b29b      	uxth	r3, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662e:	b29a      	uxth	r2, r3
 8006630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	e069      	b.n	800670c <USB_EPStartXfer+0x12a0>
 8006638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10c      	bne.n	8006662 <USB_EPStartXfer+0x11f6>
 8006648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e054      	b.n	800670c <USB_EPStartXfer+0x12a0>
 8006662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <USB_EPStartXfer+0x1226>
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668c:	3301      	adds	r3, #1
 800668e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006692:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29a      	uxth	r2, r3
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	b29b      	uxth	r3, r3
 80066a0:	029b      	lsls	r3, r3, #10
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	4313      	orrs	r3, r2
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e02d      	b.n	800670c <USB_EPStartXfer+0x12a0>
 80066b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d125      	bne.n	800670c <USB_EPStartXfer+0x12a0>
 80066c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066d6:	4413      	add	r3, r2
 80066d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	011a      	lsls	r2, r3, #4
 80066ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	b29a      	uxth	r2, r3
 8006706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800670a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800670c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8218 	beq.w	8006b4e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800671e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800673e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <USB_EPStartXfer+0x12ea>
 800674a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006756:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 81f5 	bne.w	8006b4e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006764:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 81ee 	bne.w	8006b4e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80067ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	8013      	strh	r3, [r2, #0]
 80067ce:	e1be      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80067d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	78db      	ldrb	r3, [r3, #3]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 81b4 	bne.w	8006b4a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d917      	bls.n	800682e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80067fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	619a      	str	r2, [r3, #24]
 800682c:	e00e      	b.n	800684c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2200      	movs	r2, #0
 800684a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 8085 	bne.w	8006968 <USB_EPStartXfer+0x14fc>
 800685e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800686c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006882:	4413      	add	r3, r2
 8006884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	011a      	lsls	r2, r3, #4
 8006896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800689a:	4413      	add	r3, r2
 800689c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	2b3e      	cmp	r3, #62	; 0x3e
 80068be:	d923      	bls.n	8006908 <USB_EPStartXfer+0x149c>
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USB_EPStartXfer+0x1474>
 80068d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068da:	3b01      	subs	r3, #1
 80068dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	029b      	lsls	r3, r3, #10
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e060      	b.n	80069ca <USB_EPStartXfer+0x155e>
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10c      	bne.n	800692a <USB_EPStartXfer+0x14be>
 8006910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800691c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006920:	b29a      	uxth	r2, r3
 8006922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	e04f      	b.n	80069ca <USB_EPStartXfer+0x155e>
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <USB_EPStartXfer+0x14de>
 8006940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006944:	3301      	adds	r3, #1
 8006946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800694a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006956:	b29b      	uxth	r3, r3
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	b29b      	uxth	r3, r3
 800695c:	4313      	orrs	r3, r2
 800695e:	b29a      	uxth	r2, r3
 8006960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	e030      	b.n	80069ca <USB_EPStartXfer+0x155e>
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d128      	bne.n	80069ca <USB_EPStartXfer+0x155e>
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800699c:	4413      	add	r3, r2
 800699e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	011a      	lsls	r2, r3, #4
 80069b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b4:	4413      	add	r3, r2
 80069b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 8085 	bne.w	8006af4 <USB_EPStartXfer+0x1688>
 80069ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a0e:	4413      	add	r3, r2
 8006a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	011a      	lsls	r2, r3, #4
 8006a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a26:	4413      	add	r3, r2
 8006a28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a48:	2b3e      	cmp	r3, #62	; 0x3e
 8006a4a:	d923      	bls.n	8006a94 <USB_EPStartXfer+0x1628>
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <USB_EPStartXfer+0x1600>
 8006a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a66:	3b01      	subs	r3, #1
 8006a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e05c      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <USB_EPStartXfer+0x164a>
 8006a9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e04b      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <USB_EPStartXfer+0x166a>
 8006acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	029b      	lsls	r3, r3, #10
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	e02c      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d124      	bne.n	8006b4e <USB_EPStartXfer+0x16e2>
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	011a      	lsls	r2, r3, #4
 8006b2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b32:	4413      	add	r3, r2
 8006b34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	e001      	b.n	8006b4e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e03a      	b.n	8006bc4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d020      	beq.n	8006c22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf6:	81bb      	strh	r3, [r7, #12]
 8006bf8:	89bb      	ldrh	r3, [r7, #12]
 8006bfa:	f083 0310 	eor.w	r3, r3, #16
 8006bfe:	81bb      	strh	r3, [r7, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	89bb      	ldrh	r3, [r7, #12]
 8006c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8013      	strh	r3, [r2, #0]
 8006c20:	e01f      	b.n	8006c62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c38:	81fb      	strh	r3, [r7, #14]
 8006c3a:	89fb      	ldrh	r3, [r7, #14]
 8006c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c40:	81fb      	strh	r3, [r7, #14]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	441a      	add	r2, r3
 8006c4c:	89fb      	ldrh	r3, [r7, #14]
 8006c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b087      	sub	sp, #28
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 809d 	bne.w	8006dbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d04c      	beq.n	8006d24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	823b      	strh	r3, [r7, #16]
 8006c98:	8a3b      	ldrh	r3, [r7, #16]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01b      	beq.n	8006cda <USB_EPClearStall+0x6c>
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	81fb      	strh	r3, [r7, #14]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	441a      	add	r2, r3
 8006cc4:	89fb      	ldrh	r3, [r7, #14]
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	78db      	ldrb	r3, [r3, #3]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d06c      	beq.n	8006dbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf8:	81bb      	strh	r3, [r7, #12]
 8006cfa:	89bb      	ldrh	r3, [r7, #12]
 8006cfc:	f083 0320 	eor.w	r3, r3, #32
 8006d00:	81bb      	strh	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	89bb      	ldrh	r3, [r7, #12]
 8006d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	8013      	strh	r3, [r2, #0]
 8006d22:	e04b      	b.n	8006dbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	82fb      	strh	r3, [r7, #22]
 8006d32:	8afb      	ldrh	r3, [r7, #22]
 8006d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01b      	beq.n	8006d74 <USB_EPClearStall+0x106>
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d52:	82bb      	strh	r3, [r7, #20]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	441a      	add	r2, r3
 8006d5e:	8abb      	ldrh	r3, [r7, #20]
 8006d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	827b      	strh	r3, [r7, #18]
 8006d8c:	8a7b      	ldrh	r3, [r7, #18]
 8006d8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d92:	827b      	strh	r3, [r7, #18]
 8006d94:	8a7b      	ldrh	r3, [r7, #18]
 8006d96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d9a:	827b      	strh	r3, [r7, #18]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	441a      	add	r2, r3
 8006da6:	8a7b      	ldrh	r3, [r7, #18]
 8006da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr

08006e02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b08b      	sub	sp, #44	; 0x2c
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	4611      	mov	r1, r2
 8006e56:	461a      	mov	r2, r3
 8006e58:	460b      	mov	r3, r1
 8006e5a:	80fb      	strh	r3, [r7, #6]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e60:	88bb      	ldrh	r3, [r7, #4]
 8006e62:	3301      	adds	r3, #1
 8006e64:	085b      	lsrs	r3, r3, #1
 8006e66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e70:	88fb      	ldrh	r3, [r7, #6]
 8006e72:	005a      	lsls	r2, r3, #1
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
 8006e82:	e01e      	b.n	8006ec2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	b21a      	sxth	r2, r3
 8006e94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	b21b      	sxth	r3, r3
 8006e9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	8a7a      	ldrh	r2, [r7, #18]
 8006ea2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	3302      	adds	r3, #2
 8006eae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1dd      	bne.n	8006e84 <USB_WritePMA+0x3a>
  }
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	372c      	adds	r7, #44	; 0x2c
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b08b      	sub	sp, #44	; 0x2c
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	80fb      	strh	r3, [r7, #6]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006eea:	88bb      	ldrh	r3, [r7, #4]
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006efa:	88fb      	ldrh	r3, [r7, #6]
 8006efc:	005a      	lsls	r2, r3, #1
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	e01b      	b.n	8006f46 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	3302      	adds	r3, #2
 8006f1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	3301      	adds	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	3301      	adds	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	3302      	adds	r3, #2
 8006f3e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	3b01      	subs	r3, #1
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e0      	bne.n	8006f0e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006f4c:	88bb      	ldrh	r3, [r7, #4]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	701a      	strb	r2, [r3, #0]
  }
}
 8006f68:	bf00      	nop
 8006f6a:	372c      	adds	r7, #44	; 0x2c
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006f82:	2302      	movs	r3, #2
 8006f84:	2203      	movs	r2, #3
 8006f86:	2181      	movs	r1, #129	; 0x81
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fd58 	bl	8008a3e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006f94:	2302      	movs	r3, #2
 8006f96:	2203      	movs	r2, #3
 8006f98:	2101      	movs	r1, #1
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fd4f 	bl	8008a3e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006fa8:	2054      	movs	r0, #84	; 0x54
 8006faa:	f001 fe5d 	bl	8008c68 <USBD_static_malloc>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
 8006fc4:	e012      	b.n	8006fec <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fcc:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	2340      	movs	r3, #64	; 0x40
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fe1a 	bl	8008c20 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007002:	2181      	movs	r1, #129	; 0x81
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 fd40 	bl	8008a8a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007010:	2101      	movs	r1, #1
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fd39 	bl	8008a8a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00e      	beq.n	8007048 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fe20 	bl	8008c80 <USBD_static_free>
    pdev->pClassData = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007064:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800707e:	2b00      	cmp	r3, #0
 8007080:	d051      	beq.n	8007126 <USBD_CUSTOM_HID_Setup+0xd2>
 8007082:	2b20      	cmp	r3, #32
 8007084:	f040 80d8 	bne.w	8007238 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	3b02      	subs	r3, #2
 800708e:	2b09      	cmp	r3, #9
 8007090:	d841      	bhi.n	8007116 <USBD_CUSTOM_HID_Setup+0xc2>
 8007092:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <USBD_CUSTOM_HID_Setup+0x44>)
 8007094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007098:	080070f1 	.word	0x080070f1
 800709c:	080070cf 	.word	0x080070cf
 80070a0:	08007117 	.word	0x08007117
 80070a4:	08007117 	.word	0x08007117
 80070a8:	08007117 	.word	0x08007117
 80070ac:	08007117 	.word	0x08007117
 80070b0:	08007117 	.word	0x08007117
 80070b4:	08007101 	.word	0x08007101
 80070b8:	080070df 	.word	0x080070df
 80070bc:	080070c1 	.word	0x080070c1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	885b      	ldrh	r3, [r3, #2]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80070cc:	e02a      	b.n	8007124 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3340      	adds	r3, #64	; 0x40
 80070d2:	2201      	movs	r2, #1
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 f99f 	bl	800841a <USBD_CtlSendData>
          break;
 80070dc:	e022      	b.n	8007124 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	885b      	ldrh	r3, [r3, #2]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 80070ee:	e019      	b.n	8007124 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3344      	adds	r3, #68	; 0x44
 80070f4:	2201      	movs	r2, #1
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f98e 	bl	800841a <USBD_CtlSendData>
          break;
 80070fe:	e011      	b.n	8007124 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2201      	movs	r2, #1
 8007104:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007106:	6939      	ldr	r1, [r7, #16]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	461a      	mov	r2, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 f9b1 	bl	8008476 <USBD_CtlPrepareRx>
          break;
 8007114:	e006      	b.n	8007124 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f914 	bl	8008346 <USBD_CtlError>
          ret = USBD_FAIL;
 800711e:	2302      	movs	r3, #2
 8007120:	75fb      	strb	r3, [r7, #23]
          break;
 8007122:	bf00      	nop
      }
      break;
 8007124:	e08f      	b.n	8007246 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b0b      	cmp	r3, #11
 800712c:	d87c      	bhi.n	8007228 <USBD_CUSTOM_HID_Setup+0x1d4>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <USBD_CUSTOM_HID_Setup+0xe0>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007165 	.word	0x08007165
 8007138:	08007229 	.word	0x08007229
 800713c:	08007229 	.word	0x08007229
 8007140:	08007229 	.word	0x08007229
 8007144:	08007229 	.word	0x08007229
 8007148:	08007229 	.word	0x08007229
 800714c:	0800718d 	.word	0x0800718d
 8007150:	08007229 	.word	0x08007229
 8007154:	08007229 	.word	0x08007229
 8007158:	08007229 	.word	0x08007229
 800715c:	080071db 	.word	0x080071db
 8007160:	08007203 	.word	0x08007203
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	2b03      	cmp	r3, #3
 800716c:	d107      	bne.n	800717e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800716e:	f107 030e 	add.w	r3, r7, #14
 8007172:	2202      	movs	r2, #2
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 f94f 	bl	800841a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800717c:	e05b      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 f8e0 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 8007186:	2302      	movs	r3, #2
 8007188:	75fb      	strb	r3, [r7, #23]
          break;
 800718a:	e054      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	885b      	ldrh	r3, [r3, #2]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b22      	cmp	r3, #34	; 0x22
 8007196:	d10b      	bne.n	80071b0 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	88db      	ldrh	r3, [r3, #6]
 800719c:	2b34      	cmp	r3, #52	; 0x34
 800719e:	bf28      	it	cs
 80071a0:	2334      	movcs	r3, #52	; 0x34
 80071a2:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e00d      	b.n	80071cc <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	885b      	ldrh	r3, [r3, #2]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b21      	cmp	r3, #33	; 0x21
 80071ba:	d107      	bne.n	80071cc <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80071bc:	4b24      	ldr	r3, [pc, #144]	; (8007250 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80071be:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	bf28      	it	cs
 80071c8:	2309      	movcs	r3, #9
 80071ca:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80071cc:	8bfb      	ldrh	r3, [r7, #30]
 80071ce:	461a      	mov	r2, r3
 80071d0:	69b9      	ldr	r1, [r7, #24]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 f921 	bl	800841a <USBD_CtlSendData>
          break;
 80071d8:	e02d      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d107      	bne.n	80071f4 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3348      	adds	r3, #72	; 0x48
 80071e8:	2201      	movs	r2, #1
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 f914 	bl	800841a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071f2:	e020      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 f8a5 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 80071fc:	2302      	movs	r3, #2
 80071fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007200:	e019      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007208:	2b03      	cmp	r3, #3
 800720a:	d106      	bne.n	800721a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	885b      	ldrh	r3, [r3, #2]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007218:	e00d      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f892 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 8007222:	2302      	movs	r3, #2
 8007224:	75fb      	strb	r3, [r7, #23]
          break;
 8007226:	e006      	b.n	8007236 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 f88b 	bl	8008346 <USBD_CtlError>
          ret = USBD_FAIL;
 8007230:	2302      	movs	r3, #2
 8007232:	75fb      	strb	r3, [r7, #23]
          break;
 8007234:	bf00      	nop
      }
      break;
 8007236:	e006      	b.n	8007246 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f883 	bl	8008346 <USBD_CtlError>
      ret = USBD_FAIL;
 8007240:	2302      	movs	r3, #2
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	bf00      	nop
  }
  return ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3720      	adds	r7, #32
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	200000d4 	.word	0x200000d4

08007254 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	2b03      	cmp	r3, #3
 8007272:	d111      	bne.n	8007298 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	2181      	movs	r1, #129	; 0x81
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f001 fca4 	bl	8008bda <USBD_LL_Transmit>
 8007292:	e001      	b.n	8007298 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2229      	movs	r2, #41	; 0x29
 80072b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80072b2:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000050 	.word	0x20000050

080072c4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2229      	movs	r2, #41	; 0x29
 80072d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80072d2:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	2000007c 	.word	0x2000007c

080072e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2229      	movs	r2, #41	; 0x29
 80072f0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80072f2:	4b03      	ldr	r3, [pc, #12]	; (8007300 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	200000a8 	.word	0x200000a8

08007304 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	7810      	ldrb	r0, [r2, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	7852      	ldrb	r2, [r2, #1]
 800734c:	4611      	mov	r1, r2
 800734e:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fc62 	bl	8008c20 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737a:	2b01      	cmp	r3, #1
 800737c:	d10c      	bne.n	8007398 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	7810      	ldrb	r0, [r2, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	7852      	ldrb	r2, [r2, #1]
 800738e:	4611      	mov	r1, r2
 8007390:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	220a      	movs	r2, #10
 80073b0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80073b2:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	200000e0 	.word	0x200000e0

080073c4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80073ce:	2302      	movs	r3, #2
 80073d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr

080073f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	e01a      	b.n	800743e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	79fa      	ldrb	r2, [r7, #7]
 8007434:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f001 fa96 	bl	8008968 <USBD_LL_Init>

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	e001      	b.n	800746c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007468:	2302      	movs	r3, #2
 800746a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr

08007478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 fac1 	bl	8008a08 <USBD_LL_Start>

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	4611      	mov	r1, r2
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	78fa      	ldrb	r2, [r7, #3]
 80074f8:	4611      	mov	r1, r2
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3

  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fed7 	bl	80082ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	2b02      	cmp	r3, #2
 8007542:	d016      	beq.n	8007572 <USBD_LL_SetupStage+0x6a>
 8007544:	2b02      	cmp	r3, #2
 8007546:	d81c      	bhi.n	8007582 <USBD_LL_SetupStage+0x7a>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <USBD_LL_SetupStage+0x4a>
 800754c:	2b01      	cmp	r3, #1
 800754e:	d008      	beq.n	8007562 <USBD_LL_SetupStage+0x5a>
 8007550:	e017      	b.n	8007582 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f9ca 	bl	80078f4 <USBD_StdDevReq>
      break;
 8007560:	e01a      	b.n	8007598 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa2c 	bl	80079c8 <USBD_StdItfReq>
      break;
 8007570:	e012      	b.n	8007598 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fa6c 	bl	8007a58 <USBD_StdEPReq>
      break;
 8007580:	e00a      	b.n	8007598 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800758c:	b2db      	uxtb	r3, r3
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fa99 	bl	8008ac8 <USBD_LL_StallEP>
      break;
 8007596:	bf00      	nop
  }

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	460b      	mov	r3, r1
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d14b      	bne.n	800764e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d134      	bne.n	8007632 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d919      	bls.n	8007608 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	1ad2      	subs	r2, r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d203      	bcs.n	80075f6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	e002      	b.n	80075fc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 ff56 	bl	80084b2 <USBD_CtlContinueRx>
 8007606:	e038      	b.n	800767a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800761a:	2b03      	cmp	r3, #3
 800761c:	d105      	bne.n	800762a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 ff53 	bl	80084d6 <USBD_CtlSendStatus>
 8007630:	e023      	b.n	800767a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007638:	2b05      	cmp	r3, #5
 800763a:	d11e      	bne.n	800767a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007644:	2100      	movs	r1, #0
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f001 fa3e 	bl	8008ac8 <USBD_LL_StallEP>
 800764c:	e015      	b.n	800767a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007660:	2b03      	cmp	r3, #3
 8007662:	d108      	bne.n	8007676 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	7afa      	ldrb	r2, [r7, #11]
 800766e:	4611      	mov	r1, r2
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	4798      	blx	r3
 8007674:	e001      	b.n	800767a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007676:	2302      	movs	r3, #2
 8007678:	e000      	b.n	800767c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	460b      	mov	r3, r1
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d17f      	bne.n	8007798 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3314      	adds	r3, #20
 800769c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d15c      	bne.n	8007762 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d915      	bls.n	80076e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fec0 	bl	8008452 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d2:	2300      	movs	r3, #0
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f001 faa1 	bl	8008c20 <USBD_LL_PrepareReceive>
 80076de:	e04e      	b.n	800777e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	6912      	ldr	r2, [r2, #16]
 80076e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ec:	fb01 f202 	mul.w	r2, r1, r2
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d11c      	bne.n	8007730 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076fe:	429a      	cmp	r2, r3
 8007700:	d316      	bcc.n	8007730 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800770c:	429a      	cmp	r2, r3
 800770e:	d20f      	bcs.n	8007730 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007710:	2200      	movs	r2, #0
 8007712:	2100      	movs	r1, #0
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fe9c 	bl	8008452 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007722:	2300      	movs	r3, #0
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f001 fa79 	bl	8008c20 <USBD_LL_PrepareReceive>
 800772e:	e026      	b.n	800777e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007742:	2b03      	cmp	r3, #3
 8007744:	d105      	bne.n	8007752 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007752:	2180      	movs	r1, #128	; 0x80
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f001 f9b7 	bl	8008ac8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 fece 	bl	80084fc <USBD_CtlReceiveStatus>
 8007760:	e00d      	b.n	800777e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007768:	2b04      	cmp	r3, #4
 800776a:	d004      	beq.n	8007776 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007772:	2b00      	cmp	r3, #0
 8007774:	d103      	bne.n	800777e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f001 f9a5 	bl	8008ac8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007784:	2b01      	cmp	r3, #1
 8007786:	d11d      	bne.n	80077c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff fe81 	bl	8007490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007796:	e015      	b.n	80077c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00d      	beq.n	80077c0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d108      	bne.n	80077c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	7afa      	ldrb	r2, [r7, #11]
 80077b8:	4611      	mov	r1, r2
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	4798      	blx	r3
 80077be:	e001      	b.n	80077c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80077c0:	2302      	movs	r3, #2
 80077c2:	e000      	b.n	80077c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f92e 	bl	8008a3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2240      	movs	r2, #64	; 0x40
 80077ee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	2200      	movs	r2, #0
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 f920 	bl	8008a3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2240      	movs	r2, #64	; 0x40
 8007808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6852      	ldr	r2, [r2, #4]
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	4611      	mov	r1, r2
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
  }

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr

0800786e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2204      	movs	r2, #4
 8007886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr

08007896 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d105      	bne.n	80078b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d10b      	bne.n	80078ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800790a:	2b40      	cmp	r3, #64	; 0x40
 800790c:	d005      	beq.n	800791a <USBD_StdDevReq+0x26>
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d84f      	bhi.n	80079b2 <USBD_StdDevReq+0xbe>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <USBD_StdDevReq+0x36>
 8007916:	2b20      	cmp	r3, #32
 8007918:	d14b      	bne.n	80079b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
      break;
 8007928:	e048      	b.n	80079bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b09      	cmp	r3, #9
 8007930:	d839      	bhi.n	80079a6 <USBD_StdDevReq+0xb2>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <USBD_StdDevReq+0x44>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007989 	.word	0x08007989
 800793c:	0800799d 	.word	0x0800799d
 8007940:	080079a7 	.word	0x080079a7
 8007944:	08007993 	.word	0x08007993
 8007948:	080079a7 	.word	0x080079a7
 800794c:	0800796b 	.word	0x0800796b
 8007950:	08007961 	.word	0x08007961
 8007954:	080079a7 	.word	0x080079a7
 8007958:	0800797f 	.word	0x0800797f
 800795c:	08007975 	.word	0x08007975
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9dc 	bl	8007d20 <USBD_GetDescriptor>
          break;
 8007968:	e022      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fb3f 	bl	8007ff0 <USBD_SetAddress>
          break;
 8007972:	e01d      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fb7e 	bl	8008078 <USBD_SetConfig>
          break;
 800797c:	e018      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc07 	bl	8008194 <USBD_GetConfig>
          break;
 8007986:	e013      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc37 	bl	80081fe <USBD_GetStatus>
          break;
 8007990:	e00e      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc65 	bl	8008264 <USBD_SetFeature>
          break;
 800799a:	e009      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fc74 	bl	800828c <USBD_ClrFeature>
          break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fccc 	bl	8008346 <USBD_CtlError>
          break;
 80079ae:	bf00      	nop
      }
      break;
 80079b0:	e004      	b.n	80079bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fcc6 	bl	8008346 <USBD_CtlError>
      break;
 80079ba:	bf00      	nop
  }

  return ret;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop

080079c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d82e      	bhi.n	8007a44 <USBD_StdItfReq+0x7c>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d12a      	bne.n	8007a44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	3b01      	subs	r3, #1
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d81d      	bhi.n	8007a36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	889b      	ldrh	r3, [r3, #4]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d813      	bhi.n	8007a2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	4798      	blx	r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	88db      	ldrh	r3, [r3, #6]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d110      	bne.n	8007a40 <USBD_StdItfReq+0x78>
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10d      	bne.n	8007a40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fd56 	bl	80084d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a2a:	e009      	b.n	8007a40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc89 	bl	8008346 <USBD_CtlError>
          break;
 8007a34:	e004      	b.n	8007a40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fc84 	bl	8008346 <USBD_CtlError>
          break;
 8007a3e:	e000      	b.n	8007a42 <USBD_StdItfReq+0x7a>
          break;
 8007a40:	bf00      	nop
      }
      break;
 8007a42:	e004      	b.n	8007a4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fc7d 	bl	8008346 <USBD_CtlError>
      break;
 8007a4c:	bf00      	nop
  }

  return USBD_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	889b      	ldrh	r3, [r3, #4]
 8007a6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a74:	2b40      	cmp	r3, #64	; 0x40
 8007a76:	d007      	beq.n	8007a88 <USBD_StdEPReq+0x30>
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	f200 8146 	bhi.w	8007d0a <USBD_StdEPReq+0x2b2>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <USBD_StdEPReq+0x40>
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	f040 8141 	bne.w	8007d0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
      break;
 8007a96:	e13d      	b.n	8007d14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d10a      	bne.n	8007aba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	e12d      	b.n	8007d16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d007      	beq.n	8007ad2 <USBD_StdEPReq+0x7a>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	f300 811b 	bgt.w	8007cfe <USBD_StdEPReq+0x2a6>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d072      	beq.n	8007bb2 <USBD_StdEPReq+0x15a>
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d03a      	beq.n	8007b46 <USBD_StdEPReq+0xee>
 8007ad0:	e115      	b.n	8007cfe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d002      	beq.n	8007ae2 <USBD_StdEPReq+0x8a>
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d015      	beq.n	8007b0c <USBD_StdEPReq+0xb4>
 8007ae0:	e02b      	b.n	8007b3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <USBD_StdEPReq+0xaa>
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b80      	cmp	r3, #128	; 0x80
 8007aec:	d009      	beq.n	8007b02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ffe8 	bl	8008ac8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ffe4 	bl	8008ac8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b00:	e020      	b.n	8007b44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fc1e 	bl	8008346 <USBD_CtlError>
              break;
 8007b0a:	e01b      	b.n	8007b44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10e      	bne.n	8007b32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <USBD_StdEPReq+0xda>
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d008      	beq.n	8007b32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	88db      	ldrh	r3, [r3, #6]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 ffcb 	bl	8008ac8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fccf 	bl	80084d6 <USBD_CtlSendStatus>

              break;
 8007b38:	e004      	b.n	8007b44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fc02 	bl	8008346 <USBD_CtlError>
              break;
 8007b42:	bf00      	nop
          }
          break;
 8007b44:	e0e0      	b.n	8007d08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d002      	beq.n	8007b56 <USBD_StdEPReq+0xfe>
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d015      	beq.n	8007b80 <USBD_StdEPReq+0x128>
 8007b54:	e026      	b.n	8007ba4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00c      	beq.n	8007b76 <USBD_StdEPReq+0x11e>
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b80      	cmp	r3, #128	; 0x80
 8007b60:	d009      	beq.n	8007b76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 ffae 	bl	8008ac8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b6c:	2180      	movs	r1, #128	; 0x80
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 ffaa 	bl	8008ac8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b74:	e01c      	b.n	8007bb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fbe4 	bl	8008346 <USBD_CtlError>
              break;
 8007b7e:	e017      	b.n	8007bb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	885b      	ldrh	r3, [r3, #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d112      	bne.n	8007bae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 ffb5 	bl	8008b06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fc9a 	bl	80084d6 <USBD_CtlSendStatus>
              }
              break;
 8007ba2:	e004      	b.n	8007bae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fbcd 	bl	8008346 <USBD_CtlError>
              break;
 8007bac:	e000      	b.n	8007bb0 <USBD_StdEPReq+0x158>
              break;
 8007bae:	bf00      	nop
          }
          break;
 8007bb0:	e0aa      	b.n	8007d08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d002      	beq.n	8007bc2 <USBD_StdEPReq+0x16a>
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d032      	beq.n	8007c26 <USBD_StdEPReq+0x1ce>
 8007bc0:	e097      	b.n	8007cf2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <USBD_StdEPReq+0x180>
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	d004      	beq.n	8007bd8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fbb8 	bl	8008346 <USBD_CtlError>
                break;
 8007bd6:	e091      	b.n	8007cfc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	da0b      	bge.n	8007bf8 <USBD_StdEPReq+0x1a0>
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	3310      	adds	r3, #16
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	e00b      	b.n	8007c10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fbfb 	bl	800841a <USBD_CtlSendData>
              break;
 8007c24:	e06a      	b.n	8007cfc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da11      	bge.n	8007c52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	f003 020f 	and.w	r2, r3, #15
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3318      	adds	r3, #24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d117      	bne.n	8007c78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb7b 	bl	8008346 <USBD_CtlError>
                  break;
 8007c50:	e054      	b.n	8007cfc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fb68 	bl	8008346 <USBD_CtlError>
                  break;
 8007c76:	e041      	b.n	8007cfc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da0b      	bge.n	8007c98 <USBD_StdEPReq+0x240>
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	3310      	adds	r3, #16
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	e00b      	b.n	8007cb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	3304      	adds	r3, #4
 8007cb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <USBD_StdEPReq+0x266>
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	2b80      	cmp	r3, #128	; 0x80
 8007cbc:	d103      	bne.n	8007cc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e00e      	b.n	8007ce4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 ff3a 	bl	8008b44 <USBD_LL_IsStallEP>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e002      	b.n	8007ce4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb95 	bl	800841a <USBD_CtlSendData>
              break;
 8007cf0:	e004      	b.n	8007cfc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fb26 	bl	8008346 <USBD_CtlError>
              break;
 8007cfa:	bf00      	nop
          }
          break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fb20 	bl	8008346 <USBD_CtlError>
          break;
 8007d06:	bf00      	nop
      }
      break;
 8007d08:	e004      	b.n	8007d14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb1a 	bl	8008346 <USBD_CtlError>
      break;
 8007d12:	bf00      	nop
  }

  return ret;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	2b06      	cmp	r3, #6
 8007d42:	f200 8128 	bhi.w	8007f96 <USBD_GetDescriptor+0x276>
 8007d46:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <USBD_GetDescriptor+0x2c>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d81 	.word	0x08007d81
 8007d54:	08007dc1 	.word	0x08007dc1
 8007d58:	08007f97 	.word	0x08007f97
 8007d5c:	08007f97 	.word	0x08007f97
 8007d60:	08007f37 	.word	0x08007f37
 8007d64:	08007f63 	.word	0x08007f63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
      break;
 8007d7e:	e112      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7c1b      	ldrb	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10d      	bne.n	8007da4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	f107 0208 	add.w	r2, r7, #8
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	2202      	movs	r2, #2
 8007da0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007da2:	e100      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	f107 0208 	add.w	r2, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	2202      	movs	r2, #2
 8007dbc:	701a      	strb	r2, [r3, #0]
      break;
 8007dbe:	e0f2      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	f200 80ac 	bhi.w	8007f24 <USBD_GetDescriptor+0x204>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBD_GetDescriptor+0xb4>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007ded 	.word	0x08007ded
 8007dd8:	08007e21 	.word	0x08007e21
 8007ddc:	08007e55 	.word	0x08007e55
 8007de0:	08007e89 	.word	0x08007e89
 8007de4:	08007ebd 	.word	0x08007ebd
 8007de8:	08007ef1 	.word	0x08007ef1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0e:	e091      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa97 	bl	8008346 <USBD_CtlError>
            err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1e:	e089      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e42:	e077      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa7d 	bl	8008346 <USBD_CtlError>
            err++;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	72fb      	strb	r3, [r7, #11]
          break;
 8007e52:	e06f      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 0108 	add.w	r1, r7, #8
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e76:	e05d      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa63 	bl	8008346 <USBD_CtlError>
            err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
          break;
 8007e86:	e055      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e043      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa49 	bl	8008346 <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e03b      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ede:	e029      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa2f 	bl	8008346 <USBD_CtlError>
            err++;
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	3301      	adds	r3, #1
 8007eec:	72fb      	strb	r3, [r7, #11]
          break;
 8007eee:	e021      	b.n	8007f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7c12      	ldrb	r2, [r2, #16]
 8007f08:	f107 0108 	add.w	r1, r7, #8
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f12:	e00f      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa15 	bl	8008346 <USBD_CtlError>
            err++;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	72fb      	strb	r3, [r7, #11]
          break;
 8007f22:	e007      	b.n	8007f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa0d 	bl	8008346 <USBD_CtlError>
          err++;
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f32:	e038      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
 8007f34:	e037      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7c1b      	ldrb	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	f107 0208 	add.w	r2, r7, #8
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	4798      	blx	r3
 8007f4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f50:	e029      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f9f6 	bl	8008346 <USBD_CtlError>
        err++;
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f60:	e021      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	7c1b      	ldrb	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10d      	bne.n	8007f86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	f107 0208 	add.w	r2, r7, #8
 8007f76:	4610      	mov	r0, r2
 8007f78:	4798      	blx	r3
 8007f7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	2207      	movs	r2, #7
 8007f82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f84:	e00f      	b.n	8007fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f9dc 	bl	8008346 <USBD_CtlError>
        err++;
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	3301      	adds	r3, #1
 8007f92:	72fb      	strb	r3, [r7, #11]
      break;
 8007f94:	e007      	b.n	8007fa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f9d4 	bl	8008346 <USBD_CtlError>
      err++;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8007fa4:	bf00      	nop
  }

  if (err != 0U)
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11c      	bne.n	8007fe6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007fac:	893b      	ldrh	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d011      	beq.n	8007fd6 <USBD_GetDescriptor+0x2b6>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	88db      	ldrh	r3, [r3, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00d      	beq.n	8007fd6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88da      	ldrh	r2, [r3, #6]
 8007fbe:	893b      	ldrh	r3, [r7, #8]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bf28      	it	cs
 8007fc4:	4613      	movcs	r3, r2
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fca:	893b      	ldrh	r3, [r7, #8]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fa22 	bl	800841a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d104      	bne.n	8007fe8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa79 	bl	80084d6 <USBD_CtlSendStatus>
 8007fe4:	e000      	b.n	8007fe8 <USBD_GetDescriptor+0x2c8>
    return;
 8007fe6:	bf00      	nop
    }
  }
}
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop

08007ff0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	889b      	ldrh	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d130      	bne.n	8008064 <USBD_SetAddress+0x74>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88db      	ldrh	r3, [r3, #6]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d12c      	bne.n	8008064 <USBD_SetAddress+0x74>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	2b7f      	cmp	r3, #127	; 0x7f
 8008010:	d828      	bhi.n	8008064 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	885b      	ldrh	r3, [r3, #2]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008024:	2b03      	cmp	r3, #3
 8008026:	d104      	bne.n	8008032 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f98b 	bl	8008346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008030:	e01d      	b.n	800806e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7bfa      	ldrb	r2, [r7, #15]
 8008036:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fdac 	bl	8008b9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa46 	bl	80084d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d004      	beq.n	800805a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008058:	e009      	b.n	800806e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008062:	e004      	b.n	800806e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f96d 	bl	8008346 <USBD_CtlError>
  }
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	885b      	ldrh	r3, [r3, #2]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	4b41      	ldr	r3, [pc, #260]	; (8008190 <USBD_SetConfig+0x118>)
 800808a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800808c:	4b40      	ldr	r3, [pc, #256]	; (8008190 <USBD_SetConfig+0x118>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d904      	bls.n	800809e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f955 	bl	8008346 <USBD_CtlError>
 800809c:	e075      	b.n	800818a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d002      	beq.n	80080ae <USBD_SetConfig+0x36>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d023      	beq.n	80080f4 <USBD_SetConfig+0x7c>
 80080ac:	e062      	b.n	8008174 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80080ae:	4b38      	ldr	r3, [pc, #224]	; (8008190 <USBD_SetConfig+0x118>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01a      	beq.n	80080ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80080b6:	4b36      	ldr	r3, [pc, #216]	; (8008190 <USBD_SetConfig+0x118>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2203      	movs	r2, #3
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080c8:	4b31      	ldr	r3, [pc, #196]	; (8008190 <USBD_SetConfig+0x118>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7ff f9e8 	bl	80074a4 <USBD_SetClassConfig>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d104      	bne.n	80080e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f932 	bl	8008346 <USBD_CtlError>
            return;
 80080e2:	e052      	b.n	800818a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f9f6 	bl	80084d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080ea:	e04e      	b.n	800818a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9f2 	bl	80084d6 <USBD_CtlSendStatus>
        break;
 80080f2:	e04a      	b.n	800818a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080f4:	4b26      	ldr	r3, [pc, #152]	; (8008190 <USBD_SetConfig+0x118>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d112      	bne.n	8008122 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008104:	4b22      	ldr	r3, [pc, #136]	; (8008190 <USBD_SetConfig+0x118>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <USBD_SetConfig+0x118>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff f9e4 	bl	80074e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9db 	bl	80084d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008120:	e033      	b.n	800818a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008122:	4b1b      	ldr	r3, [pc, #108]	; (8008190 <USBD_SetConfig+0x118>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d01d      	beq.n	800816c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	b2db      	uxtb	r3, r3
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff f9d2 	bl	80074e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800813e:	4b14      	ldr	r3, [pc, #80]	; (8008190 <USBD_SetConfig+0x118>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008148:	4b11      	ldr	r3, [pc, #68]	; (8008190 <USBD_SetConfig+0x118>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff f9a8 	bl	80074a4 <USBD_SetClassConfig>
 8008154:	4603      	mov	r3, r0
 8008156:	2b02      	cmp	r3, #2
 8008158:	d104      	bne.n	8008164 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8f2 	bl	8008346 <USBD_CtlError>
            return;
 8008162:	e012      	b.n	800818a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f9b6 	bl	80084d6 <USBD_CtlSendStatus>
        break;
 800816a:	e00e      	b.n	800818a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9b2 	bl	80084d6 <USBD_CtlSendStatus>
        break;
 8008172:	e00a      	b.n	800818a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8e5 	bl	8008346 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <USBD_SetConfig+0x118>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff f9ad 	bl	80074e2 <USBD_ClrClassConfig>
        break;
 8008188:	bf00      	nop
    }
  }
}
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200002f4 	.word	0x200002f4

08008194 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d004      	beq.n	80081b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f8cc 	bl	8008346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ae:	e022      	b.n	80081f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	dc02      	bgt.n	80081c0 <USBD_GetConfig+0x2c>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	dc03      	bgt.n	80081c6 <USBD_GetConfig+0x32>
 80081be:	e015      	b.n	80081ec <USBD_GetConfig+0x58>
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d00b      	beq.n	80081dc <USBD_GetConfig+0x48>
 80081c4:	e012      	b.n	80081ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3308      	adds	r3, #8
 80081d0:	2201      	movs	r2, #1
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f920 	bl	800841a <USBD_CtlSendData>
        break;
 80081da:	e00c      	b.n	80081f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3304      	adds	r3, #4
 80081e0:	2201      	movs	r2, #1
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f918 	bl	800841a <USBD_CtlSendData>
        break;
 80081ea:	e004      	b.n	80081f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8a9 	bl	8008346 <USBD_CtlError>
        break;
 80081f4:	bf00      	nop
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820e:	3b01      	subs	r3, #1
 8008210:	2b02      	cmp	r3, #2
 8008212:	d81e      	bhi.n	8008252 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	88db      	ldrh	r3, [r3, #6]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d004      	beq.n	8008226 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f891 	bl	8008346 <USBD_CtlError>
        break;
 8008224:	e01a      	b.n	800825c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f043 0202 	orr.w	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	330c      	adds	r3, #12
 8008246:	2202      	movs	r2, #2
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8e5 	bl	800841a <USBD_CtlSendData>
      break;
 8008250:	e004      	b.n	800825c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f876 	bl	8008346 <USBD_CtlError>
      break;
 800825a:	bf00      	nop
  }
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d106      	bne.n	8008284 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f929 	bl	80084d6 <USBD_CtlSendStatus>
  }
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829c:	3b01      	subs	r3, #1
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d80b      	bhi.n	80082ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d10c      	bne.n	80082c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f90f 	bl	80084d6 <USBD_CtlSendStatus>
      }
      break;
 80082b8:	e004      	b.n	80082c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f842 	bl	8008346 <USBD_CtlError>
      break;
 80082c2:	e000      	b.n	80082c6 <USBD_ClrFeature+0x3a>
      break;
 80082c4:	bf00      	nop
  }
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	785a      	ldrb	r2, [r3, #1]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	3302      	adds	r3, #2
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	3303      	adds	r3, #3
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4413      	add	r3, r2
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	b29a      	uxth	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	3305      	adds	r3, #5
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	b29b      	uxth	r3, r3
 8008318:	4413      	add	r3, r2
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	3306      	adds	r3, #6
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	b29a      	uxth	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	3307      	adds	r3, #7
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	b29b      	uxth	r3, r3
 8008334:	4413      	add	r3, r2
 8008336:	b29a      	uxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	80da      	strh	r2, [r3, #6]

}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fbb8 	bl	8008ac8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008358:	2100      	movs	r1, #0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fbb4 	bl	8008ac8 <USBD_LL_StallEP>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d032      	beq.n	80083e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f834 	bl	80083ec <USBD_GetLen>
 8008384:	4603      	mov	r3, r0
 8008386:	3301      	adds	r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	75fa      	strb	r2, [r7, #23]
 8008398:	461a      	mov	r2, r3
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	4413      	add	r3, r2
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	7812      	ldrb	r2, [r2, #0]
 80083a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	75fa      	strb	r2, [r7, #23]
 80083aa:	461a      	mov	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4413      	add	r3, r2
 80083b0:	2203      	movs	r2, #3
 80083b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80083b4:	e012      	b.n	80083dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	60fa      	str	r2, [r7, #12]
 80083bc:	7dfa      	ldrb	r2, [r7, #23]
 80083be:	1c51      	adds	r1, r2, #1
 80083c0:	75f9      	strb	r1, [r7, #23]
 80083c2:	4611      	mov	r1, r2
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	440a      	add	r2, r1
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	75fa      	strb	r2, [r7, #23]
 80083d2:	461a      	mov	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4413      	add	r3, r2
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e8      	bne.n	80083b6 <USBD_GetString+0x4e>
    }
  }
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083f8:	e005      	b.n	8008406 <USBD_GetLen+0x1a>
  {
    len++;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	3301      	adds	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3301      	adds	r3, #1
 8008404:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f5      	bne.n	80083fa <USBD_GetLen+0xe>
  }

  return len;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2202      	movs	r2, #2
 800842c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fbc9 	bl	8008bda <USBD_LL_Transmit>

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	4613      	mov	r3, r2
 800845e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 fbb7 	bl	8008bda <USBD_LL_Transmit>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2203      	movs	r2, #3
 8008488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800848c:	88fa      	ldrh	r2, [r7, #6]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	2100      	movs	r1, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fbbc 	bl	8008c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	4613      	mov	r3, r2
 80084be:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	2100      	movs	r1, #0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fbaa 	bl	8008c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2204      	movs	r2, #4
 80084e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb74 	bl	8008bda <USBD_LL_Transmit>

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2205      	movs	r2, #5
 8008508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fb84 	bl	8008c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008528:	2200      	movs	r2, #0
 800852a:	4912      	ldr	r1, [pc, #72]	; (8008574 <MX_USB_DEVICE_Init+0x50>)
 800852c:	4812      	ldr	r0, [pc, #72]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 800852e:	f7fe ff5f 	bl	80073f0 <USBD_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008538:	f7f7 ffc4 	bl	80004c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800853c:	490f      	ldr	r1, [pc, #60]	; (800857c <MX_USB_DEVICE_Init+0x58>)
 800853e:	480e      	ldr	r0, [pc, #56]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008540:	f7fe ff81 	bl	8007446 <USBD_RegisterClass>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800854a:	f7f7 ffbb 	bl	80004c4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800854e:	490c      	ldr	r1, [pc, #48]	; (8008580 <MX_USB_DEVICE_Init+0x5c>)
 8008550:	4809      	ldr	r0, [pc, #36]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008552:	f7fe ff37 	bl	80073c4 <USBD_CUSTOM_HID_RegisterInterface>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800855c:	f7f7 ffb2 	bl	80004c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008560:	4805      	ldr	r0, [pc, #20]	; (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008562:	f7fe ff89 	bl	8007478 <USBD_Start>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800856c:	f7f7 ffaa 	bl	80004c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008570:	bf00      	nop
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000130 	.word	0x20000130
 8008578:	200002f8 	.word	0x200002f8
 800857c:	20000018 	.word	0x20000018
 8008580:	20000120 	.word	0x20000120

08008584 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008588:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800858a:	4618      	mov	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	bc80      	pop	{r7}
 8008590:	4770      	bx	lr

08008592 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008592:	b480      	push	{r7}
 8008594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008598:	4618      	mov	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	460a      	mov	r2, r1
 80085aa:	71fb      	strb	r3, [r7, #7]
 80085ac:	4613      	mov	r3, r2
 80085ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	//To copy the reception buffer into the report_buffer variable 
	//memcpy(report_buffer, state, 64);
	flag_rx = 1; 
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <CUSTOM_HID_OutEvent_FS+0x24>)
 80085b2:	2201      	movs	r2, #1
 80085b4:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80085b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	200002e0 	.word	0x200002e0

080085c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2212      	movs	r2, #18
 80085d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085da:	4b03      	ldr	r3, [pc, #12]	; (80085e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	2000014c 	.word	0x2000014c

080085ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2204      	movs	r2, #4
 80085fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085fe:	4b03      	ldr	r3, [pc, #12]	; (800860c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000160 	.word	0x20000160

08008610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d105      	bne.n	800862e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	4907      	ldr	r1, [pc, #28]	; (8008644 <USBD_FS_ProductStrDescriptor+0x34>)
 8008626:	4808      	ldr	r0, [pc, #32]	; (8008648 <USBD_FS_ProductStrDescriptor+0x38>)
 8008628:	f7ff fe9e 	bl	8008368 <USBD_GetString>
 800862c:	e004      	b.n	8008638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4904      	ldr	r1, [pc, #16]	; (8008644 <USBD_FS_ProductStrDescriptor+0x34>)
 8008632:	4805      	ldr	r0, [pc, #20]	; (8008648 <USBD_FS_ProductStrDescriptor+0x38>)
 8008634:	f7ff fe98 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200005bc 	.word	0x200005bc
 8008648:	08008d70 	.word	0x08008d70

0800864c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	4904      	ldr	r1, [pc, #16]	; (800866c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800865c:	4804      	ldr	r0, [pc, #16]	; (8008670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800865e:	f7ff fe83 	bl	8008368 <USBD_GetString>
  return USBD_StrDesc;
 8008662:	4b02      	ldr	r3, [pc, #8]	; (800866c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200005bc 	.word	0x200005bc
 8008670:	08008d88 	.word	0x08008d88

08008674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	221a      	movs	r2, #26
 8008684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008686:	f000 f843 	bl	8008710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800868a:	4b02      	ldr	r3, [pc, #8]	; (8008694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000164 	.word	0x20000164

08008698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	; (80086cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	; (80086d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086b0:	f7ff fe5a 	bl	8008368 <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	; (80086cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086bc:	f7ff fe54 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200005bc 	.word	0x200005bc
 80086d0:	08008d9c 	.word	0x08008d9c

080086d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4907      	ldr	r1, [pc, #28]	; (8008708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ea:	4808      	ldr	r0, [pc, #32]	; (800870c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086ec:	f7ff fe3c 	bl	8008368 <USBD_GetString>
 80086f0:	e004      	b.n	80086fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	4904      	ldr	r1, [pc, #16]	; (8008708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086f6:	4805      	ldr	r0, [pc, #20]	; (800870c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086f8:	f7ff fe36 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	200005bc 	.word	0x200005bc
 800870c:	08008db0 	.word	0x08008db0

08008710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008716:	4b0f      	ldr	r3, [pc, #60]	; (8008754 <Get_SerialNum+0x44>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800871c:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <Get_SerialNum+0x48>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008722:	4b0e      	ldr	r3, [pc, #56]	; (800875c <Get_SerialNum+0x4c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008736:	2208      	movs	r2, #8
 8008738:	4909      	ldr	r1, [pc, #36]	; (8008760 <Get_SerialNum+0x50>)
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f814 	bl	8008768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008740:	2204      	movs	r2, #4
 8008742:	4908      	ldr	r1, [pc, #32]	; (8008764 <Get_SerialNum+0x54>)
 8008744:	68b8      	ldr	r0, [r7, #8]
 8008746:	f000 f80f 	bl	8008768 <IntToUnicode>
  }
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	1ffff7e8 	.word	0x1ffff7e8
 8008758:	1ffff7ec 	.word	0x1ffff7ec
 800875c:	1ffff7f0 	.word	0x1ffff7f0
 8008760:	20000166 	.word	0x20000166
 8008764:	20000176 	.word	0x20000176

08008768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800877a:	2300      	movs	r3, #0
 800877c:	75fb      	strb	r3, [r7, #23]
 800877e:	e027      	b.n	80087d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0f1b      	lsrs	r3, r3, #28
 8008784:	2b09      	cmp	r3, #9
 8008786:	d80b      	bhi.n	80087a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4619      	mov	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	440b      	add	r3, r1
 8008798:	3230      	adds	r2, #48	; 0x30
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e00a      	b.n	80087b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	0f1b      	lsrs	r3, r3, #28
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	4619      	mov	r1, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	440b      	add	r3, r1
 80087b0:	3237      	adds	r2, #55	; 0x37
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	3301      	adds	r3, #1
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	3301      	adds	r3, #1
 80087ce:	75fb      	strb	r3, [r7, #23]
 80087d0:	7dfa      	ldrb	r2, [r7, #23]
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d3d3      	bcc.n	8008780 <IntToUnicode+0x18>
  }
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	bc80      	pop	{r7}
 80087e2:	4770      	bx	lr

080087e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <HAL_PCD_MspInit+0x44>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d113      	bne.n	800881e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087f6:	4b0d      	ldr	r3, [pc, #52]	; (800882c <HAL_PCD_MspInit+0x48>)
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	4a0c      	ldr	r2, [pc, #48]	; (800882c <HAL_PCD_MspInit+0x48>)
 80087fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008800:	61d3      	str	r3, [r2, #28]
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <HAL_PCD_MspInit+0x48>)
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	2014      	movs	r0, #20
 8008814:	f7f8 fe2f 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008818:	2014      	movs	r0, #20
 800881a:	f7f8 fe48 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40005c00 	.word	0x40005c00
 800882c:	40021000 	.word	0x40021000

08008830 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7fe fe5e 	bl	8007508 <USBD_LL_SetupStage>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	440b      	add	r3, r1
 8008874:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	4619      	mov	r1, r3
 800887e:	f7fe fe90 	bl	80075a2 <USBD_LL_DataOutStage>
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	440b      	add	r3, r1
 80088aa:	333c      	adds	r3, #60	; 0x3c
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f7fe fee7 	bl	8007684 <USBD_LL_DataInStage>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fff7 	bl	80078c0 <USBD_LL_SOF>
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088e2:	2301      	movs	r3, #1
 80088e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d001      	beq.n	80088f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088ee:	f7f7 fde9 	bl	80004c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80088f8:	7bfa      	ldrb	r2, [r7, #15]
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe ffa7 	bl	8007850 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008908:	4618      	mov	r0, r3
 800890a:	f7fe ff60 	bl	80077ce <USBD_LL_Reset>
}
 800890e:	bf00      	nop
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe ffa1 	bl	800786e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <HAL_PCD_SuspendCallback+0x30>)
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	4a03      	ldr	r2, [pc, #12]	; (8008948 <HAL_PCD_SuspendCallback+0x30>)
 800893a:	f043 0306 	orr.w	r3, r3, #6
 800893e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	e000ed00 	.word	0xe000ed00

0800894c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe ff9b 	bl	8007896 <USBD_LL_Resume>
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008970:	4a23      	ldr	r2, [pc, #140]	; (8008a00 <USBD_LL_Init+0x98>)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <USBD_LL_Init+0x98>)
 800897c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008980:	4b1f      	ldr	r3, [pc, #124]	; (8008a00 <USBD_LL_Init+0x98>)
 8008982:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <USBD_LL_Init+0x9c>)
 8008984:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008986:	4b1e      	ldr	r3, [pc, #120]	; (8008a00 <USBD_LL_Init+0x98>)
 8008988:	2208      	movs	r2, #8
 800898a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800898c:	4b1c      	ldr	r3, [pc, #112]	; (8008a00 <USBD_LL_Init+0x98>)
 800898e:	2202      	movs	r2, #2
 8008990:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008992:	4b1b      	ldr	r3, [pc, #108]	; (8008a00 <USBD_LL_Init+0x98>)
 8008994:	2200      	movs	r2, #0
 8008996:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008998:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <USBD_LL_Init+0x98>)
 800899a:	2200      	movs	r2, #0
 800899c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800899e:	4b18      	ldr	r3, [pc, #96]	; (8008a00 <USBD_LL_Init+0x98>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089a4:	4816      	ldr	r0, [pc, #88]	; (8008a00 <USBD_LL_Init+0x98>)
 80089a6:	f7f9 f957 	bl	8001c58 <HAL_PCD_Init>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80089b0:	f7f7 fd88 	bl	80004c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ba:	2318      	movs	r3, #24
 80089bc:	2200      	movs	r2, #0
 80089be:	2100      	movs	r1, #0
 80089c0:	f7fa fe5f 	bl	8003682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ca:	2358      	movs	r3, #88	; 0x58
 80089cc:	2200      	movs	r2, #0
 80089ce:	2180      	movs	r1, #128	; 0x80
 80089d0:	f7fa fe57 	bl	8003682 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089da:	2398      	movs	r3, #152	; 0x98
 80089dc:	2200      	movs	r2, #0
 80089de:	2181      	movs	r1, #129	; 0x81
 80089e0:	f7fa fe4f 	bl	8003682 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ea:	23d8      	movs	r3, #216	; 0xd8
 80089ec:	2200      	movs	r2, #0
 80089ee:	2101      	movs	r1, #1
 80089f0:	f7fa fe47 	bl	8003682 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	200007bc 	.word	0x200007bc
 8008a04:	40005c00 	.word	0x40005c00

08008a08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7f9 fa19 	bl	8001e56 <HAL_PCD_Start>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f93c 	bl	8008ca8 <USBD_Get_USB_Status>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	70fb      	strb	r3, [r7, #3]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70bb      	strb	r3, [r7, #2]
 8008a54:	4613      	mov	r3, r2
 8008a56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a66:	78bb      	ldrb	r3, [r7, #2]
 8008a68:	883a      	ldrh	r2, [r7, #0]
 8008a6a:	78f9      	ldrb	r1, [r7, #3]
 8008a6c:	f7f9 fb6e 	bl	800214c <HAL_PCD_EP_Open>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f916 	bl	8008ca8 <USBD_Get_USB_Status>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aa4:	78fa      	ldrb	r2, [r7, #3]
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f9 fbac 	bl	8002206 <HAL_PCD_EP_Close>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f8f7 	bl	8008ca8 <USBD_Get_USB_Status>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f9 fc3d 	bl	8002366 <HAL_PCD_EP_SetStall>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f8d8 	bl	8008ca8 <USBD_Get_USB_Status>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b20:	78fa      	ldrb	r2, [r7, #3]
 8008b22:	4611      	mov	r1, r2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f9 fc7e 	bl	8002426 <HAL_PCD_EP_ClrStall>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f8b9 	bl	8008ca8 <USBD_Get_USB_Status>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	da0c      	bge.n	8008b7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	440b      	add	r3, r1
 8008b74:	3302      	adds	r3, #2
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	e00b      	b.n	8008b92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b80:	68f9      	ldr	r1, [r7, #12]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	440b      	add	r3, r1
 8008b8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008b90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bb6:	78fa      	ldrb	r2, [r7, #3]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f9 faa1 	bl	8002102 <HAL_PCD_SetAddress>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 f86e 	bl	8008ca8 <USBD_Get_USB_Status>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	461a      	mov	r2, r3
 8008be6:	460b      	mov	r3, r1
 8008be8:	72fb      	strb	r3, [r7, #11]
 8008bea:	4613      	mov	r3, r2
 8008bec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bfc:	893b      	ldrh	r3, [r7, #8]
 8008bfe:	7af9      	ldrb	r1, [r7, #11]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	f7f9 fb79 	bl	80022f8 <HAL_PCD_EP_Transmit>
 8008c06:	4603      	mov	r3, r0
 8008c08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 f84b 	bl	8008ca8 <USBD_Get_USB_Status>
 8008c12:	4603      	mov	r3, r0
 8008c14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	72fb      	strb	r3, [r7, #11]
 8008c30:	4613      	mov	r3, r2
 8008c32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c42:	893b      	ldrh	r3, [r7, #8]
 8008c44:	7af9      	ldrb	r1, [r7, #11]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	f7f9 fb25 	bl	8002296 <HAL_PCD_EP_Receive>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f828 	bl	8008ca8 <USBD_Get_USB_Status>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3718      	adds	r7, #24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <USBD_static_malloc+0x14>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr
 8008c7c:	20000aac 	.word	0x20000aac

08008c80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bc80      	pop	{r7}
 8008c90:	4770      	bx	lr

08008c92 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr

08008ca8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d817      	bhi.n	8008cec <USBD_Get_USB_Status+0x44>
 8008cbc:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <USBD_Get_USB_Status+0x1c>)
 8008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc2:	bf00      	nop
 8008cc4:	08008cd5 	.word	0x08008cd5
 8008cc8:	08008cdb 	.word	0x08008cdb
 8008ccc:	08008ce1 	.word	0x08008ce1
 8008cd0:	08008ce7 	.word	0x08008ce7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd8:	e00b      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cde:	e008      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce4:	e005      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cea:	e002      	b.n	8008cf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf0:	bf00      	nop
  }
  return usb_status;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop

08008d00 <memset>:
 8008d00:	4603      	mov	r3, r0
 8008d02:	4402      	add	r2, r0
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d100      	bne.n	8008d0a <memset+0xa>
 8008d08:	4770      	bx	lr
 8008d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d0e:	e7f9      	b.n	8008d04 <memset+0x4>

08008d10 <__libc_init_array>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	2600      	movs	r6, #0
 8008d14:	4d0c      	ldr	r5, [pc, #48]	; (8008d48 <__libc_init_array+0x38>)
 8008d16:	4c0d      	ldr	r4, [pc, #52]	; (8008d4c <__libc_init_array+0x3c>)
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	d109      	bne.n	8008d34 <__libc_init_array+0x24>
 8008d20:	f000 f81a 	bl	8008d58 <_init>
 8008d24:	2600      	movs	r6, #0
 8008d26:	4d0a      	ldr	r5, [pc, #40]	; (8008d50 <__libc_init_array+0x40>)
 8008d28:	4c0a      	ldr	r4, [pc, #40]	; (8008d54 <__libc_init_array+0x44>)
 8008d2a:	1b64      	subs	r4, r4, r5
 8008d2c:	10a4      	asrs	r4, r4, #2
 8008d2e:	42a6      	cmp	r6, r4
 8008d30:	d105      	bne.n	8008d3e <__libc_init_array+0x2e>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d38:	4798      	blx	r3
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	e7ee      	b.n	8008d1c <__libc_init_array+0xc>
 8008d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d42:	4798      	blx	r3
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7f2      	b.n	8008d2e <__libc_init_array+0x1e>
 8008d48:	08008e7c 	.word	0x08008e7c
 8008d4c:	08008e7c 	.word	0x08008e7c
 8008d50:	08008e7c 	.word	0x08008e7c
 8008d54:	08008e80 	.word	0x08008e80

08008d58 <_init>:
 8008d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5a:	bf00      	nop
 8008d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5e:	bc08      	pop	{r3}
 8008d60:	469e      	mov	lr, r3
 8008d62:	4770      	bx	lr

08008d64 <_fini>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	bf00      	nop
 8008d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6a:	bc08      	pop	{r3}
 8008d6c:	469e      	mov	lr, r3
 8008d6e:	4770      	bx	lr
